{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://website/./node_modules/swiper/swiper.min.css","webpack://website/./node_modules/css-loader/dist/runtime/api.js","webpack://website/./node_modules/css-loader/dist/runtime/getUrl.js","webpack://website/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://website/./node_modules/swiper/swiper.min.css?33f0","webpack://website/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://website/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://website/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://website/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://website/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://website/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://website/./src/scripts/modules/burger.js","webpack://website/./src/scripts/modules/tabs.js","webpack://website/./node_modules/dom7/dom7.esm.js","webpack://website/./node_modules/ssr-window/ssr-window.esm.js","webpack://website/./node_modules/swiper/core/breakpoints/getBreakpoint.js","webpack://website/./node_modules/swiper/core/breakpoints/index.js","webpack://website/./node_modules/swiper/core/breakpoints/setBreakpoint.js","webpack://website/./node_modules/swiper/core/check-overflow/index.js","webpack://website/./node_modules/swiper/core/classes/addClasses.js","webpack://website/./node_modules/swiper/core/classes/index.js","webpack://website/./node_modules/swiper/core/classes/removeClasses.js","webpack://website/./node_modules/swiper/core/core.js","webpack://website/./node_modules/swiper/core/defaults.js","webpack://website/./node_modules/swiper/core/events-emitter.js","webpack://website/./node_modules/swiper/core/events/index.js","webpack://website/./node_modules/swiper/core/events/onClick.js","webpack://website/./node_modules/swiper/core/events/onResize.js","webpack://website/./node_modules/swiper/core/events/onScroll.js","webpack://website/./node_modules/swiper/core/events/onTouchEnd.js","webpack://website/./node_modules/swiper/core/events/onTouchMove.js","webpack://website/./node_modules/swiper/core/events/onTouchStart.js","webpack://website/./node_modules/swiper/core/grab-cursor/index.js","webpack://website/./node_modules/swiper/core/grab-cursor/setGrabCursor.js","webpack://website/./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js","webpack://website/./node_modules/swiper/core/images/index.js","webpack://website/./node_modules/swiper/core/images/loadImage.js","webpack://website/./node_modules/swiper/core/images/preloadImages.js","webpack://website/./node_modules/swiper/core/loop/index.js","webpack://website/./node_modules/swiper/core/loop/loopCreate.js","webpack://website/./node_modules/swiper/core/loop/loopDestroy.js","webpack://website/./node_modules/swiper/core/loop/loopFix.js","webpack://website/./node_modules/swiper/core/moduleExtendParams.js","webpack://website/./node_modules/swiper/core/modules/observer/observer.js","webpack://website/./node_modules/swiper/core/modules/resize/resize.js","webpack://website/./node_modules/swiper/core/slide/index.js","webpack://website/./node_modules/swiper/core/slide/slideNext.js","webpack://website/./node_modules/swiper/core/slide/slidePrev.js","webpack://website/./node_modules/swiper/core/slide/slideReset.js","webpack://website/./node_modules/swiper/core/slide/slideTo.js","webpack://website/./node_modules/swiper/core/slide/slideToClickedSlide.js","webpack://website/./node_modules/swiper/core/slide/slideToClosest.js","webpack://website/./node_modules/swiper/core/slide/slideToLoop.js","webpack://website/./node_modules/swiper/core/transition/index.js","webpack://website/./node_modules/swiper/core/transition/setTransition.js","webpack://website/./node_modules/swiper/core/transition/transitionEmit.js","webpack://website/./node_modules/swiper/core/transition/transitionEnd.js","webpack://website/./node_modules/swiper/core/transition/transitionStart.js","webpack://website/./node_modules/swiper/core/translate/getTranslate.js","webpack://website/./node_modules/swiper/core/translate/index.js","webpack://website/./node_modules/swiper/core/translate/maxTranslate.js","webpack://website/./node_modules/swiper/core/translate/minTranslate.js","webpack://website/./node_modules/swiper/core/translate/setTranslate.js","webpack://website/./node_modules/swiper/core/translate/translateTo.js","webpack://website/./node_modules/swiper/core/update/index.js","webpack://website/./node_modules/swiper/core/update/updateActiveIndex.js","webpack://website/./node_modules/swiper/core/update/updateAutoHeight.js","webpack://website/./node_modules/swiper/core/update/updateClickedSlide.js","webpack://website/./node_modules/swiper/core/update/updateProgress.js","webpack://website/./node_modules/swiper/core/update/updateSize.js","webpack://website/./node_modules/swiper/core/update/updateSlides.js","webpack://website/./node_modules/swiper/core/update/updateSlidesClasses.js","webpack://website/./node_modules/swiper/core/update/updateSlidesOffset.js","webpack://website/./node_modules/swiper/core/update/updateSlidesProgress.js","webpack://website/./node_modules/swiper/modules/manipulation/methods/addSlide.js","webpack://website/./node_modules/swiper/modules/manipulation/methods/appendSlide.js","webpack://website/./node_modules/swiper/modules/manipulation/methods/prependSlide.js","webpack://website/./node_modules/swiper/modules/manipulation/methods/removeAllSlides.js","webpack://website/./node_modules/swiper/modules/manipulation/methods/removeSlide.js","webpack://website/./node_modules/swiper/shared/classes-to-selector.js","webpack://website/./node_modules/swiper/shared/create-element-if-not-defined.js","webpack://website/./node_modules/swiper/shared/create-shadow.js","webpack://website/./node_modules/swiper/shared/dom.js","webpack://website/./node_modules/swiper/shared/effect-init.js","webpack://website/./node_modules/swiper/shared/effect-target.js","webpack://website/./node_modules/swiper/shared/effect-virtual-transition-end.js","webpack://website/./node_modules/swiper/shared/get-browser.js","webpack://website/./node_modules/swiper/shared/get-device.js","webpack://website/./node_modules/swiper/shared/get-support.js","webpack://website/./node_modules/swiper/shared/utils.js","webpack://website/webpack/bootstrap","webpack://website/webpack/runtime/compat get default export","webpack://website/webpack/runtime/define property getters","webpack://website/webpack/runtime/hasOwnProperty shorthand","webpack://website/webpack/runtime/jsonp chunk loading","webpack://website/./src/scripts/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:application/font-woff;charset=utf-8;base64, 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\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/**\\n * Swiper 7.4.1\\n * Most modern mobile touch slider and framework with hardware accelerated transitions\\n * https://swiperjs.com\\n *\\n * Copyright 2014-2021 Vladimir Kharlampidi\\n *\\n * Released under the MIT License\\n *\\n * Released on: December 24, 2021\\n */\\n\\n@font-face{font-family:swiper-icons;src:url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-pointer-events{touch-action:pan-y}.swiper-pointer-events.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-3d,.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d .swiper-slide,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0,0,0,.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-horizontal.swiper-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-vertical.swiper-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-centered>.swiper-wrapper::before{content:'';flex-shrink:0;order:9999}.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/swiper/swiper.min.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;EAUE;;AAEF,WAAW,wBAAwB,CAAC,2CAA4rE,CAAC,eAAe,CAAC,iBAAiB,CAAC,MAAM,4BAA4B,CAAC,QAAQ,gBAAgB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC,iCAAiC,qBAAqB,CAAC,gBAAgB,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,6BAA6B,CAAC,sBAAsB,CAAC,8CAA8C,8BAA8B,CAAC,uBAAuB,kBAAkB,CAAC,uCAAuC,kBAAkB,CAAC,cAAc,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,8BAA8B,iBAAiB,CAAC,oDAAoD,WAAW,CAAC,mCAAmC,sBAAsB,CAAC,oCAAoC,CAAC,sDAAsD,kBAAkB,CAAC,yQAAyQ,2BAA2B,CAAC,sLAAsL,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,mBAAmB,CAAC,UAAU,CAAC,gCAAgC,0BAA0B,CAAC,qCAAqC,sEAAsE,CAAC,sCAAsC,uEAAuE,CAAC,oCAAoC,qEAAqE,CAAC,uCAAuC,wEAAwE,CAAC,iCAAiC,aAAa,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,oDAAoD,YAAY,CAAC,+CAA+C,6BAA6B,CAAC,mDAAmD,4BAA4B,CAAC,iDAAiD,4BAA4B,CAAC,yCAAyC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,6EAA6E,wDAAwD,CAAC,2DAA2D,WAAW,CAAC,cAAc,CAAC,yCAAyC,CAAC,2EAA2E,uDAAuD,CAAC,yDAAyD,UAAU,CAAC,aAAa,CAAC,0CAA0C,CAAC,+CAA+C,+BAA+B\",\"sourcesContent\":[\"/**\\n * Swiper 7.4.1\\n * Most modern mobile touch slider and framework with hardware accelerated transitions\\n * https://swiperjs.com\\n *\\n * Copyright 2014-2021 Vladimir Kharlampidi\\n *\\n * Released under the MIT License\\n *\\n * Released on: December 24, 2021\\n */\\n\\n@font-face{font-family:swiper-icons;src:url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-pointer-events{touch-action:pan-y}.swiper-pointer-events.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-3d,.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d .swiper-slide,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0,0,0,.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-horizontal.swiper-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-vertical.swiper-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-centered>.swiper-wrapper::before{content:'';flex-shrink:0;order:9999}.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  }\n\n  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them\n\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n\n  if (options.hash) {\n    url += options.hash;\n  } // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n\n\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n\n  return url;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\n      import API from \"!../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../css-loader/dist/cjs.js!./swiper.min.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../css-loader/dist/cjs.js!./swiper.min.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","export function burger(btn, nav, link, body) {\n  const mobileBtn = document.querySelector(btn)\n  const navMenu = document.querySelector(nav)\n  const bodyPage = document.querySelector(body)\n  const links = document.querySelectorAll(link)\n\n  function toggleMenu() {\n    mobileBtn.classList.toggle(\"mobile-btn-active\")\n    navMenu.classList.toggle(\"nav--active\")\n    bodyPage.classList.toggle(\"disable-scroll\")\n  }\n\n  function closeMenu() {\n    mobileBtn.classList.remove(\"mobile-btn-active\")\n    navMenu.classList.remove(\"nav--active\")\n    bodyPage.classList.remove(\"disable-scroll\")\n  }\n\n  if (mobileBtn) {\n    mobileBtn.addEventListener(\"click\", toggleMenu)\n  }\n\n  if (links) {\n    links.forEach((link) => {\n      link.addEventListener(\"click\", closeMenu)\n    })\n  }\n\n  document.addEventListener('click', (e) => {\n    if(e.target.classList == 'disable-scroll') {\n      closeMenu()\n    }\n  })\n\n  document.addEventListener('keydown', (e) => {\n    if(e.key == \"Escape\") {\n      closeMenu()\n    }\n  })\n}\n","export class tabbisClass {\n\tinit(options) {\n\t\tthis.thisOptions(options);\n\t\tthis.thisMemory();\n\t\tthis.setup();\n\t}\n\n\t// Setup\n\tsetup() {\n\t\tconst panes = document.querySelectorAll(this.options.paneGroup);\n\t\tconst tabs = document.querySelectorAll(this.options.tabGroup);\n\n\t\ttabs.forEach((tabGroups, groupIndex) => {\n\t\t\tconst paneGroups = panes[groupIndex];\n\t\t\tconst activeIndex = this.getActiveIndex(tabGroups, groupIndex);\n\n\t\t\ttabGroups.setAttribute('role', 'tablist');\n\n\t\t\t// Reset items\n\t\t\tthis.resetTabs([ ...tabGroups.children ]);\n\t\t\tthis.resetPanes([ ...paneGroups.children ]);\n\n      \n      // Remove tab attributes\n      // resetTabs(tabs) {\n      // \ttabs.forEach((el) => el.setAttribute('aria-selected', 'false'));\n      // \tthis.resetTabindex(tabs);\n      // }\n\n      // // Reset pane attributes\n      // resetPanes(panes) {\n      // \tpanes.forEach((el) => el.setAttribute('hidden', ''));\n      // }\n\n\t\t\t[ ...tabGroups.children ].forEach((tabItem, tabIndex) => {\n\t\t\t\tconst paneItem = paneGroups.children[tabIndex];\n\n\t\t\t\t// Add attributes\n\t\t\t\tthis.addTabAttributes(tabItem, groupIndex);\n\t\t\t\tthis.addPaneAttributes(tabItem, paneItem);\n\n\t\t\t\ttabItem.groupIndex = groupIndex;\n\n\t\t\t\t// Trigger event\n\t\t\t\ttabItem.addEventListener(this.options.trigger, (e) => {\n\t\t\t\t\tthis.activate(e.currentTarget, tabItem.groupIndex);\n\t\t\t\t});\n\n\t\t\t\t// Key event\n\t\t\t\tif (this.options.keyboardNavigation) {\n\t\t\t\t\ttabItem.addEventListener('keydown', (e) => {\n\t\t\t\t\t\tthis.eventKey(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (activeIndex !== null) {\n\t\t\t\tthis.activateTab([ ...tabGroups.children ][activeIndex]);\n\t\t\t\tthis.activatePane([ ...paneGroups.children ][activeIndex]);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Event key\n\teventKey(e) {\n\t\tif ([ 13, 37, 38, 39, 40 ].includes(e.keyCode)) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tif (e.keyCode == 13) {\n\t\t\te.currentTarget.click();\n\t\t} else if ([ 39, 40 ].includes(e.keyCode)) {\n\t\t\tthis.step(e, 1);\n\t\t} else if ([ 37, 38 ].includes(e.keyCode)) {\n\t\t\tthis.step(e, -1);\n\t\t}\n\t}\n\n\t// Index\n\tindex(el) {\n\t\treturn [ ...el.parentElement.children ].indexOf(el);\n\t}\n\n\t// Step\n\tstep(e, direction) {\n\t\tconst children = e.currentTarget.parentElement.children;\n\t\tthis.resetTabindex(children);\n\n\t\tlet el = children[this.pos(e.currentTarget, children, direction)];\n\t\tel.focus();\n\t\tel.setAttribute('tabindex', 0);\n\t}\n\n\tresetTabindex(children) {\n\t\t[ ...children ].forEach((child) => {\n\t\t\tchild.setAttribute('tabindex', '-1');\n\t\t});\n\t}\n\n\t// Pos\n\tpos(tab, children, direction) {\n\t\tlet pos = this.index(tab);\n\t\tpos += direction;\n\n\t\tif (children.length <= pos) {\n\t\t\tpos = 0;\n\t\t} else if (pos == -1) {\n\t\t\tpos = children.length - 1;\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t// Emit event\n\temitEvent(tab, pane) {\n\t\tlet event = new CustomEvent('tabbis', {\n\t\t\tbubbles: true,\n\t\t\tdetail: {\n\t\t\t\ttab: tab,\n\t\t\t\tpane: pane\n\t\t\t}\n\t\t});\n\n\t\ttab.dispatchEvent(event);\n\t}\n\n\t// Set active\n\tgetActiveIndex(groupTabs, groupIndex) {\n\t\tconst memory = this.loadMemory(groupIndex);\n\n\t\tif (typeof memory !== 'undefined') {\n\t\t\treturn memory;\n\t\t} else {\n\t\t\tlet element = groupTabs.querySelector(this.options.tabActive);\n\n\t\t\tif (!element) {\n\t\t\t\telement = groupTabs.querySelector('[aria-selected=\"true\"]');\n\t\t\t}\n\n\t\t\tif (element) {\n\t\t\t\treturn this.index(element);\n\t\t\t} else if (this.options.tabActiveFallback !== false) {\n\t\t\t\treturn this.options.tabActiveFallback;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t// ATTRIBUTES\n\n\t// Add tab attributes\n\taddTabAttributes(tab, groupIndex) {\n\t\tconst tabIndex = this.index(tab);\n\t\tconst prefix = this.options.prefix;\n\n\t\ttab.setAttribute('role', 'tab');\n\t\ttab.setAttribute('aria-controls', `${prefix}tabpanel-${groupIndex}-${tabIndex}`);\n\t\ttab.setAttribute('id', `${prefix}tab-${groupIndex}-${tabIndex}`);\n\t}\n\n\t// Add tabpanel attributes\n\taddPaneAttributes(tab, pane) {\n\t\tpane.setAttribute('role', 'tabpanel');\n\t\tpane.setAttribute('aria-labelledby', tab.getAttribute('id'));\n\t\tpane.setAttribute('id', tab.getAttribute('aria-controls'));\n\t\tpane.setAttribute('tabindex', '0');\n\t}\n\n\t// Activate\n\tactivate(tab, i) {\n\t\tconst pane = document.querySelector(`#${tab.getAttribute('aria-controls')}`);\n\n\t\tthis.resetTabs([ ...tab.parentNode.children ]);\n\t\tthis.resetPanes([ ...pane.parentElement.children ]);\n\n\t\tthis.activateTab(tab);\n\t\tthis.activatePane(pane);\n\n\t\tthis.saveMemory(tab, i);\n\n\t\tthis.emitEvent(tab, pane);\n\t}\n\n\t// Activate tab\n\tactivateTab(tab) {\n\t\ttab.setAttribute('aria-selected', 'true');\n\t\ttab.setAttribute('tabindex', '0');\n\t}\n\n\t// Activate pane\n\tactivatePane(pane) {\n\t\tpane.removeAttribute('hidden');\n\t}\n\n\t// Remove tab attributes\n\tresetTabs(tabs) {\n\t\ttabs.forEach((el) => el.setAttribute('aria-selected', 'false'));\n\t\tthis.resetTabindex(tabs);\n\t}\n\n\t// Reset pane attributes\n\tresetPanes(panes) {\n\t\tpanes.forEach((el) => el.setAttribute('hidden', ''));\n\t}\n\n\t// MEMORY\n\n\t// Load memory\n\tloadMemory(groupIndex) {\n\t\tif (!this.options.memory) return;\n\t\tif (typeof this.memory[groupIndex] === 'undefined') return;\n\t\tif (this.memory[groupIndex] === null) return;\n\n\t\treturn parseInt(this.memory[groupIndex]);\n\t}\n\n\t// Save memory\n\tsaveMemory(tab, groupIndex) {\n\t\tif (!this.options.memory) return;\n\t\tthis.memory[groupIndex] = this.index(tab);\n\t\tlocalStorage.setItem(this.options.memory, JSON.stringify(this.memory));\n\t}\n\n\t// This memory\n\tthisMemory() {\n\t\tif (!this.options.memory) return;\n\t\tconst store = localStorage.getItem(this.options.memory);\n\t\tthis.memory = store !== null ? JSON.parse(store) : [];\n\t}\n\n\t// OPTIONS\n\n\t// Defaults\n\tdefaults() {\n\t\treturn {\n\t\t\tkeyboardNavigation: true,\n\t\t\tmemory: false,\n\t\t\tpaneGroup: '[data-panes]',\n\t\t\tprefix: '',\n\t\t\ttabActive: '[data-active]',\n\t\t\ttabActiveFallback: 0,\n\t\t\ttabGroup: '[data-tabs]',\n\t\t\ttrigger: 'click'\n\t\t};\n\t}\n\n\t// This options\n\tthisOptions(options) {\n\t\tthis.options = Object.assign(this.defaults(), options);\n\t\tif (this.options.memory !== true) return;\n\t\tthis.options.memory = 'tabbis';\n\t}\n}\n\n// Function call\nexport function tabbis(options = {}) {\n\tconst tabs = new tabbisClass();\n\ttabs.init(options);\n}","/**\n * Dom7 4.0.4\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2022, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: January 11, 2022\n */\nimport { getWindow, getDocument } from 'ssr-window';\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get() {\n      return proto;\n    },\n\n    set(value) {\n      proto.__proto__ = value;\n    }\n\n  });\n}\n\nclass Dom7 extends Array {\n  constructor(items) {\n    if (typeof items === 'number') {\n      super(items);\n    } else {\n      super(...(items || []));\n      makeReactive(this);\n    }\n  }\n\n}\n\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach(el => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n\n  return uniqueArray;\n}\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());\n}\n\n// eslint-disable-next-line\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n\n  const a = [];\n  const res = context.querySelectorAll(selector);\n\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n\n  return a;\n}\n\nfunction $(selector, context) {\n  const window = getWindow();\n  const document = getDocument();\n  let arr = [];\n\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n\n  if (!selector) {\n    return new Dom7(arr);\n  }\n\n  if (typeof selector === 'string') {\n    const html = selector.trim();\n\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      let toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      const tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n\n  return new Dom7(arrayUnique(arr));\n}\n\n$.fn = Dom7.prototype;\n\n// eslint-disable-next-line\n\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\n\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\n\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    classNames.forEach(className => {\n      el.classList.toggle(className);\n    });\n  });\n}\n\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  return arrayFilter(this, el => {\n    return classNames.filter(className => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\n\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n\n  return this;\n}\n\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (const propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction data(key, value) {\n  let el;\n\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n\n    const dataKey = el.getAttribute(`data-${key}`);\n\n    if (dataKey) {\n      return dataKey;\n    }\n\n    return undefined;\n  } // Set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n\n  return this;\n}\n\nfunction removeData(key) {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\n\nfunction dataset() {\n  const el = this[0];\n  if (!el) return undefined;\n  const dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (const dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (let i = 0; i < el.attributes.length; i += 1) {\n      const attr = el.attributes[i];\n\n      if (attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;\n      }\n    }\n  }\n\n  for (const key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n\n  return dataset;\n}\n\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    const el = this[0];\n    if (!el) return undefined;\n\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      const values = [];\n\n      for (let i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n\n      return values;\n    }\n\n    return el.value;\n  } // set value\n\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {\n      for (let j = 0; j < el.options.length; j += 1) {\n        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;\n      }\n    } else {\n      el.value = value;\n    }\n  }\n\n  return this;\n}\n\nfunction value(value) {\n  return this.val(value);\n}\n\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n\n  return this;\n}\n\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n  }\n\n  return this;\n}\n\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n      const parents = $(target).parents(); // eslint-disable-line\n\n      for (let k = 0; k < parents.length; k += 1) {\n        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n\n    listener.apply(this, eventData);\n  }\n\n  const events = eventType.split(' ');\n  let j;\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  if (!capture) capture = false;\n  const events = eventType.split(' ');\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction once(...args) {\n  const dom = this;\n  let [eventName, targetSelector, listener, capture] = args;\n\n  if (typeof args[1] === 'function') {\n    [eventName, listener, capture] = args;\n    targetSelector = undefined;\n  }\n\n  function onceHandler(...eventArgs) {\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\n\nfunction trigger(...args) {\n  const window = getWindow();\n  const events = args[0].split(' ');\n  const eventData = args[1];\n\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n\n      if (window.CustomEvent) {\n        const evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction transitionEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction animationEnd(callback) {\n  const dom = this;\n\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n\n  return this;\n}\n\nfunction width() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n\n  return null;\n}\n\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n\n    return this[0].offsetWidth;\n  }\n\n  return null;\n}\n\nfunction height() {\n  const window = getWindow();\n\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n\n  return null;\n}\n\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n\n    return this[0].offsetHeight;\n  }\n\n  return null;\n}\n\nfunction offset() {\n  if (this.length > 0) {\n    const window = getWindow();\n    const document = getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n\n  return null;\n}\n\nfunction hide() {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n\n  return this;\n}\n\nfunction show() {\n  const window = getWindow();\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n\n  return this;\n}\n\nfunction styles() {\n  const window = getWindow();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\n\nfunction css(props, value) {\n  const window = getWindow();\n  let i;\n\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n\n      return this;\n    }\n  }\n\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n\n    return this;\n  }\n\n  return this;\n}\n\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach((el, index) => {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\n\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\n\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n\n  return this;\n}\n\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n\n  return this;\n}\n\nfunction is(selector) {\n  const window = getWindow();\n  const document = getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  if (selector === document) {\n    return el === document;\n  }\n\n  if (selector === window) {\n    return el === window;\n  }\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n\nfunction index() {\n  let child = this[0];\n  let i;\n\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n\n    return i;\n  }\n\n  return undefined;\n}\n\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n\n  if (index > length - 1) {\n    return $([]);\n  }\n\n  if (index < 0) {\n    const returnIndex = length + index;\n    if (returnIndex < 0) return $([]);\n    return $([this[returnIndex]]);\n  }\n\n  return $([this[index]]);\n}\n\nfunction append(...els) {\n  let newChild;\n  const document = getDocument();\n\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction appendTo(parent) {\n  $(parent).append(this);\n  return this;\n}\n\nfunction prepend(newChild) {\n  const document = getDocument();\n  let i;\n  let j;\n\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n\n  return this;\n}\n\nfunction prependTo(parent) {\n  $(parent).prepend(this);\n  return this;\n}\n\nfunction insertBefore(selector) {\n  const before = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (let j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\n\nfunction insertAfter(selector) {\n  const after = $(selector);\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (let j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\n\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n\n    el = next;\n  }\n\n  return $(nextEls);\n}\n\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n\n      return $([]);\n    }\n\n    if (el.previousElementSibling) return $([el.previousElementSibling]);\n    return $([]);\n  }\n\n  return $([]);\n}\n\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n\n    el = prev;\n  }\n\n  return $(prevEls);\n}\n\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\n\nfunction parent(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n\n  return $(parents);\n}\n\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n\n    while (parent) {\n      if (selector) {\n        if ($(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n\n      parent = parent.parentNode;\n    }\n  }\n\n  return $(parents);\n}\n\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return $([]);\n  }\n\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n\n  return closest;\n}\n\nfunction find(selector) {\n  const foundElements = [];\n\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n\n  return $(foundElements);\n}\n\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n\n  return $(children);\n}\n\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n\n  return this;\n}\n\nfunction detach() {\n  return this.remove();\n}\n\nfunction add(...els) {\n  const dom = this;\n  let i;\n  let j;\n\n  for (i = 0; i < els.length; i += 1) {\n    const toAdd = $(els[i]);\n\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n\n  return dom;\n}\n\nfunction empty() {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n\n    if (el.nodeType === 1) {\n      for (let j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n\n      el.textContent = '';\n    }\n  }\n\n  return this;\n}\n\n// eslint-disable-next-line\n\nfunction scrollTo(...args) {\n  const window = getWindow();\n  let [left, top, duration, easing, callback] = args;\n\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    [left, top, duration, callback, easing] = args;\n  }\n\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    const el = this;\n    let currentTop;\n    let currentLeft;\n    let maxTop;\n    let maxLeft;\n    let newTop;\n    let newLeft;\n    let scrollTop; // eslint-disable-line\n\n    let scrollLeft; // eslint-disable-line\n\n    let animateTop = top > 0 || top === 0;\n    let animateLeft = left > 0 || left === 0;\n\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n\n    if (animateTop) {\n      currentTop = el.scrollTop;\n\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n\n    if (!duration) return;\n\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n\n    let startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n    function render(time = new Date().getTime()) {\n      if (startTime === null) {\n        startTime = time;\n      }\n\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      let done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\n\nfunction scrollTop(...args) {\n  let [top, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\n\nfunction scrollLeft(...args) {\n  let [left, duration, easing, callback] = args;\n\n  if (args.length === 3 && typeof easing === 'function') {\n    [left, duration, callback, easing] = args;\n  }\n\n  const dom = this;\n\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n}\n\n// eslint-disable-next-line\n\nfunction animate(initialProps, initialParams) {\n  const window = getWindow();\n  const els = this;\n  const a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n\n    easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n\n      return progress;\n    },\n\n    stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n\n    done(complete) {\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n\n      if (a.que.length > 0) {\n        const que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n\n    animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n\n      const elements = []; // Define & Cache Initials & Units\n\n      a.elements.each((el, index) => {\n        let initialFullValue;\n        let initialValue;\n        let unit;\n        let finalValue;\n        let finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(prop => {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue,\n            initialValue,\n            unit,\n            finalValue,\n            finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      let startTime = null;\n      let time;\n      let elementsDone = 0;\n      let propsDone = 0;\n      let done;\n      let began = false;\n      a.animating = true;\n\n      function render() {\n        time = new Date().getTime();\n        let progress;\n        let easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n\n        elements.forEach(element => {\n          const el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(prop => {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            const {\n              initialValue,\n              finalValue,\n              unit\n            } = el[prop];\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            const currentValue = el[prop].currentValue;\n\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n\n  };\n\n  if (a.elements.length === 0) {\n    return els;\n  }\n\n  let animateInstance;\n\n  for (let i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n\n  return els;\n}\n\nfunction stop() {\n  const els = this;\n\n  for (let i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\n\nconst noTrigger = 'resize scroll'.split(' ');\n\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === 'undefined') {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this.on(name, ...args);\n  }\n\n  return eventHandler;\n}\n\nconst click = shortcut('click');\nconst blur = shortcut('blur');\nconst focus = shortcut('focus');\nconst focusin = shortcut('focusin');\nconst focusout = shortcut('focusout');\nconst keyup = shortcut('keyup');\nconst keydown = shortcut('keydown');\nconst keypress = shortcut('keypress');\nconst submit = shortcut('submit');\nconst change = shortcut('change');\nconst mousedown = shortcut('mousedown');\nconst mousemove = shortcut('mousemove');\nconst mouseup = shortcut('mouseup');\nconst mouseenter = shortcut('mouseenter');\nconst mouseleave = shortcut('mouseleave');\nconst mouseout = shortcut('mouseout');\nconst mouseover = shortcut('mouseover');\nconst touchstart = shortcut('touchstart');\nconst touchend = shortcut('touchend');\nconst touchmove = shortcut('touchmove');\nconst resize = shortcut('resize');\nconst scroll = shortcut('scroll');\n\nexport default $;\nexport { $, add, addClass, animate, animationEnd, append, appendTo, attr, blur, change, children, click, closest, css, data, dataset, detach, each, empty, eq, filter, find, focus, focusin, focusout, hasClass, height, hide, html, index, insertAfter, insertBefore, is, keydown, keypress, keyup, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, next, nextAll, off, offset, on, once, outerHeight, outerWidth, parent, parents, prepend, prependTo, prev, prevAll, prop, remove, removeAttr, removeClass, removeData, resize, scroll, scrollLeft, scrollTo, scrollTop, show, siblings, stop, styles, submit, text, toggleClass, touchend, touchmove, touchstart, transform, transition, transitionEnd, trigger, val, value, width };\n","/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target = {}, src = {}) {\n    Object.keys(src).forEach((key) => {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nconst ssrDocument = {\n    body: {},\n    addEventListener() { },\n    removeEventListener() { },\n    activeElement: {\n        blur() { },\n        nodeName: '',\n    },\n    querySelector() {\n        return null;\n    },\n    querySelectorAll() {\n        return [];\n    },\n    getElementById() {\n        return null;\n    },\n    createEvent() {\n        return {\n            initEvent() { },\n        };\n    },\n    createElement() {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute() { },\n            getElementsByTagName() {\n                return [];\n            },\n        };\n    },\n    createElementNS() {\n        return {};\n    },\n    importNode() {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nfunction getDocument() {\n    const doc = typeof document !== 'undefined' ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\n\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState() { },\n        pushState() { },\n        go() { },\n        back() { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener() { },\n    removeEventListener() { },\n    getComputedStyle() {\n        return {\n            getPropertyValue() {\n                return '';\n            },\n        };\n    },\n    Image() { },\n    Date() { },\n    screen: {},\n    setTimeout() { },\n    clearTimeout() { },\n    matchMedia() {\n        return {};\n    },\n    requestAnimationFrame(callback) {\n        if (typeof setTimeout === 'undefined') {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame(id) {\n        if (typeof setTimeout === 'undefined') {\n            return;\n        }\n        clearTimeout(id);\n    },\n};\nfunction getWindow() {\n    const win = typeof window !== 'undefined' ? window : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\nexport { extend, getDocument, getWindow, ssrDocument, ssrWindow };\n","import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base = 'window', containerEl) {\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}","import setBreakpoint from './setBreakpoint.js';\nimport getBreakpoint from './getBreakpoint.js';\nexport default {\n  setBreakpoint,\n  getBreakpoint\n};","import { extend } from '../../shared/utils.js';\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nexport default function setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  }\n\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}","function checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\n\nexport default {\n  checkOverflow\n};","function prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\n\nexport default function addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support\n  } = swiper; // prettier-ignore\n\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'pointer-events': !support.touch\n  }, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(' '));\n  swiper.emitContainerClasses();\n}","import addClasses from './addClasses.js';\nimport removeClasses from './removeClasses.js';\nexport default {\n  addClasses,\n  removeClasses\n};","export default function removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(' '));\n  swiper.emitContainerClasses();\n}","/* eslint no-param-reassign: \"off\" */\nimport { getDocument } from 'ssr-window';\nimport $ from '../shared/dom.js';\nimport { extend, now, deleteProps } from '../shared/utils.js';\nimport { getSupport } from '../shared/get-support.js';\nimport { getDevice } from '../shared/get-device.js';\nimport { getBrowser } from '../shared/get-browser.js';\nimport Resize from './modules/resize/resize.js';\nimport Observer from './modules/observer/observer.js';\nimport eventsEmitter from './events-emitter.js';\nimport update from './update/index.js';\nimport translate from './translate/index.js';\nimport transition from './transition/index.js';\nimport slide from './slide/index.js';\nimport loop from './loop/index.js';\nimport grabCursor from './grab-cursor/index.js';\nimport events from './events/index.js';\nimport breakpoints from './breakpoints/index.js';\nimport classes from './classes/index.js';\nimport images from './images/index.js';\nimport checkOverflow from './check-overflow/index.js';\nimport defaults from './defaults.js';\nimport moduleExtendParams from './moduleExtendParams.js';\nconst prototypes = {\n  eventsEmitter,\n  update,\n  translate,\n  transition,\n  slide,\n  loop,\n  grabCursor,\n  events,\n  breakpoints,\n  checkOverflow,\n  classes,\n  images\n};\nconst extendedDefaults = {};\n\nclass Swiper {\n  constructor(...args) {\n    let el;\n    let params;\n\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n\n    if (!params) params = {};\n    params = extend({}, params);\n    if (el && !params.el) params.el = el;\n\n    if (params.el && $(params.el).length > 1) {\n      const swipers = [];\n      $(params.el).each(containerEl => {\n        const newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    } // Swiper Instance\n\n\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    }); // Extend defaults with modules params\n\n    const swiperParams = extend({}, defaults, allModulesParams); // Extend defaults with passed params\n\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params); // add event listeners\n\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    } // Save Dom lib\n\n\n    swiper.$ = $; // Extend Swiper\n\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: $(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        const desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: now(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper'); // Init\n\n    if (swiper.params.init) {\n      swiper.init();\n    } // Return app instance\n\n\n    return swiper;\n  }\n\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    swiper.emit('enable');\n  }\n\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n\n    swiper.emit('disable');\n  }\n\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.each(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n\n  slidesPerViewDynamic(view = 'current', exact = false) {\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n\n    return spv;\n  }\n\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper; // Breakpoints\n\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n\n    let translated;\n\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate();\n\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n\n      if (!translated) {\n        setTranslate();\n      }\n    }\n\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n\n    swiper.emit('update');\n  }\n\n  changeDirection(newDirection, needUpdate = true) {\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted) return true; // Find el\n\n    const $el = $(el || swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return false;\n    }\n\n    el.swiper = swiper;\n\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = $(el.shadowRoot.querySelector(getWrapperSelector())); // Children needs to return slot items\n\n        res.children = options => $el.children(options);\n\n        return res;\n      }\n\n      return $el.children(getWrapperSelector());\n    }; // Find Wrapper\n\n\n    let $wrapperEl = getWrapper();\n\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document = getDocument();\n      const wrapper = document.createElement('div');\n      $wrapperEl = $(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each(slideEl => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box'\n    });\n    return true;\n  }\n\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit'); // Set breakpoint\n\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    } // Add Classes\n\n\n    swiper.addClasses(); // Create loop\n\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    } // Update size\n\n\n    swiper.updateSize(); // Update slides\n\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    } // Set Grab Cursor\n\n\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    } // Slide To Initial Slide\n\n\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    } // Attach events\n\n\n    swiper.attachEvents(); // Init Flag\n\n    swiper.initialized = true; // Emit\n\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n\n  destroy(deleteInstance = true, cleanStyles = true) {\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy'); // Init Flag\n\n    swiper.initialized = false; // Detach events\n\n    swiper.detachEvents(); // Destroy loop\n\n    if (params.loop) {\n      swiper.loopDestroy();\n    } // Cleanup styles\n\n\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy'); // Detach emitter events\n\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n\n    swiper.destroyed = true;\n    return null;\n  }\n\n  static extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  }\n\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n\n  static get defaults() {\n    return defaults;\n  }\n\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n\n    Swiper.installModule(module);\n    return Swiper;\n  }\n\n}\n\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nexport default Swiper;","export default {\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};","/* eslint-disable no-underscore-dangle */\nexport default {\n  on(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n\n  once(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler(...args) {\n      self.off(events, onceHandler);\n\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n\n      handler.apply(self, args);\n    }\n\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n\n  onAny(handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n\n    return self;\n  },\n\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n\n    return self;\n  },\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n\n  emit(...args) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n\n};","import { getDocument } from 'ssr-window';\nimport onTouchStart from './onTouchStart.js';\nimport onTouchMove from './onTouchMove.js';\nimport onTouchEnd from './onTouchEnd.js';\nimport onResize from './onResize.js';\nimport onClick from './onClick.js';\nimport onScroll from './onScroll.js';\nlet dummyEventAttached = false;\n\nfunction dummyEventListener() {}\n\nconst events = (swiper, method) => {\n  const document = getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method; // Touch Events\n\n  if (!support.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  } // Prevent Links Clicks\n\n\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  } // Resize handler\n\n\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', onResize, true);\n  }\n};\n\nfunction attachEvents() {\n  const swiper = this;\n  const document = getDocument();\n  const {\n    params,\n    support\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n\n  swiper.onClick = onClick.bind(swiper);\n\n  if (support.touch && !dummyEventAttached) {\n    document.addEventListener('touchstart', dummyEventListener);\n    dummyEventAttached = true;\n  }\n\n  events(swiper, 'on');\n}\n\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\n\nexport default {\n  attachEvents,\n  detachEvents\n};","export default function onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}","export default function onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return; // Breakpoints\n\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  } // Save locks\n\n\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper; // Disable locks on resize\n\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  } // Return locks after resize\n\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}","export default function onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  } // eslint-disable-next-line\n\n\n  if (swiper.translate === -0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}","import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now } from '../../shared/utils.js';\nexport default function onTouchMove(event) {\n  const document = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n\n  if (!swiper.allowTouchMove) {\n    // isMoved = true;\n    swiper.allowClick = false;\n\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n\n    return;\n  }\n\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n\n  if (data.isTouchEvent && document.activeElement) {\n    if (e.target === document.activeElement && $(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n\n  if (!data.startMoving) {\n    return;\n  }\n\n  swiper.allowClick = false;\n\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n\n    data.allowMomentumBounce = false; // Grab Cursor\n\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n\n    swiper.emit('sliderFirstMove', e);\n  }\n\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  } // Directions locks\n\n\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  } // Threshold\n\n\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return; // Update active index in free mode\n\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  } // Update progress\n\n\n  swiper.updateProgress(data.currentTranslate); // Update translate\n\n  swiper.setTranslate(data.currentTranslate);\n}","import { getWindow, getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now } from '../../shared/utils.js'; // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\n\nfunction closestElement(selector, base = this) {\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n    return found || __closestFrom(el.getRootNode().host);\n  }\n\n  return __closestFrom(base);\n}\n\nexport default function onTouchStart(event) {\n  const swiper = this;\n  const document = getDocument();\n  const window = getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let $targetEl = $(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return; // change target el for shadow root component\n\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {\n    $targetEl = $(event.path[0]);\n  }\n\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot); // use closestElement for shadow root element to get the actual closest for nested shadow root element\n\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, e.target) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n\n  if (e.type !== 'touchstart') {\n    let preventDefault = true;\n    if ($targetEl.is(data.focusableElements)) preventDefault = false;\n\n    if (document.activeElement && $(document.activeElement).is(data.focusableElements) && document.activeElement !== $targetEl[0]) {\n      document.activeElement.blur();\n    }\n\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n\n  swiper.emit('touchStart', e);\n}","import setGrabCursor from './setGrabCursor.js';\nimport unsetGrabCursor from './unsetGrabCursor.js';\nexport default {\n  setGrabCursor,\n  unsetGrabCursor\n};","export default function setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}","export default function unsetGrabCursor() {\n  const swiper = this;\n\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n}","import loadImage from './loadImage.js';\nimport preloadImages from './preloadImages.js';\nexport default {\n  loadImage,\n  preloadImages\n};","import { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window = getWindow();\n  let image;\n\n  function onReady() {\n    if (callback) callback();\n  }\n\n  const isPicture = $(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n\n      if (sizes) {\n        image.sizes = sizes;\n      }\n\n      if (srcset) {\n        image.srcset = srcset;\n      }\n\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}","export default function preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n  }\n}","import loopCreate from './loopCreate.js';\nimport loopFix from './loopFix.js';\nimport loopDestroy from './loopDestroy.js';\nexport default {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};","import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nexport default function loopCreate() {\n  const swiper = this;\n  const document = getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper; // Remove duplicated slides\n\n  const $selector = $wrapperEl.children().length > 0 ? $($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = $(document.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index) => {\n    const slide = $(el);\n\n    if (index < swiper.loopedSlides) {\n      appendSlides.push(el);\n    }\n\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n      prependSlides.push(el);\n    }\n\n    slide.attr('data-swiper-slide-index', index);\n  });\n\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}","export default function loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}","export default function loopFix() {\n  const swiper = this;\n  swiper.emit('beforeLoopFix');\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding\n\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit('loopFix');\n}","import { extend } from '../shared/utils.js';\nexport default function moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj = {}) {\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      extend(allModulesParams, obj);\n      return;\n    }\n\n    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      extend(allModulesParams, obj);\n      return;\n    }\n\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    extend(allModulesParams, obj);\n  };\n}","import { getWindow } from 'ssr-window';\nexport default function Observer({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const observers = [];\n  const window = getWindow();\n\n  const attach = (target, options = {}) => {\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n\n  const init = () => {\n    if (!swiper.params.observer) return;\n\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    } // Observe container\n\n\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    }); // Observe wrapper\n\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}","import { getWindow } from 'ssr-window';\nexport default function Resize({\n  swiper,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  let observer = null;\n\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      const {\n        width,\n        height\n      } = swiper;\n      let newWidth = width;\n      let newHeight = height;\n      entries.forEach(({\n        contentBoxSize,\n        contentRect,\n        target\n      }) => {\n        if (target && target !== swiper.el) return;\n        newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n        newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n      });\n\n      if (newWidth !== width || newHeight !== height) {\n        resizeHandler();\n      }\n    });\n    observer.observe(swiper.el);\n  };\n\n  const removeObserver = () => {\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}","import slideTo from './slideTo.js';\nimport slideToLoop from './slideToLoop.js';\nimport slideNext from './slideNext.js';\nimport slidePrev from './slidePrev.js';\nimport slideReset from './slideReset.js';\nimport slideToClosest from './slideToClosest.js';\nimport slideToClickedSlide from './slideToClickedSlide.js';\nexport default {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};","/* eslint no-unused-vars: \"off\" */\nexport default function slideNext(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled) return swiper;\n  let perGroup = params.slidesPerGroup;\n\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slidePrev(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return swiper;\n\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide) return false;\n    swiper.loopFix(); // eslint-disable-next-line\n\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n\n  let prevIndex = 0;\n\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n\n  if (params.rewind && swiper.isBeginning) {\n    return swiper.slideTo(swiper.slides.length - 1, speed, runCallbacks, internal);\n  }\n\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideReset(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function slideTo(index = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  const translate = -snapGrid[snapIndex]; // Update progress\n\n  swiper.updateProgress(translate); // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}","import $ from '../../shared/dom.js';\nimport { nextTick } from '../../shared/utils.js';\nexport default function slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideToClosest(speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}","export default function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","import setTransition from './setTransition.js';\nimport transitionStart from './transitionStart.js';\nimport transitionEnd from './transitionEnd.js';\nexport default {\n  setTransition,\n  transitionStart,\n  transitionEnd\n};","export default function setTransition(duration, byController) {\n  const swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}","export default function transitionEmit({\n  swiper,\n  runCallbacks,\n  direction,\n  step\n}) {\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit(`transition${step}`);\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n\n    swiper.emit(`slideChangeTransition${step}`);\n\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionEnd(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionStart(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}","import { getTranslate } from '../../shared/utils.js';\nexport default function getSwiperTranslate(axis = this.isHorizontal() ? 'x' : 'y') {\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n\n  if (params.cssMode) {\n    return translate;\n  }\n\n  let currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}","import getTranslate from './getTranslate.js';\nimport setTranslate from './setTranslate.js';\nimport minTranslate from './minTranslate.js';\nimport maxTranslate from './maxTranslate.js';\nimport translateTo from './translateTo.js';\nexport default {\n  getTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};","export default function maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}","export default function minTranslate() {\n  return -this.snapGrid[0];\n}","export default function setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\n\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress\n\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n\n    if (!swiper.animating) {\n      swiper.animating = true;\n\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}","import updateSize from './updateSize.js';\nimport updateSlides from './updateSlides.js';\nimport updateAutoHeight from './updateAutoHeight.js';\nimport updateSlidesOffset from './updateSlidesOffset.js';\nimport updateSlidesProgress from './updateSlidesProgress.js';\nimport updateProgress from './updateProgress.js';\nimport updateSlidesClasses from './updateSlidesClasses.js';\nimport updateActiveIndex from './updateActiveIndex.js';\nimport updateClickedSlide from './updateClickedSlide.js';\nexport default {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};","export default function updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n\n  if (typeof activeIndex === 'undefined') {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    } // Normalize slideIndex\n\n\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n\n    return;\n  } // Get real index\n\n\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}","export default function updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n    }\n\n    return swiper.slides.eq(index)[0];\n  }; // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      swiper.visibleSlides.each(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight || newHeight === 0) swiper.$wrapperEl.css('height', `${newHeight}px`);\n}","import $ from '../../shared/dom.js';\nexport default function updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = $(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}","export default function updateProgress(translate) {\n  const swiper = this;\n\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}","export default function updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  } // Subtract paddings\n\n\n  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);\n  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}","import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n}","export default function updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  } // Active classes\n\n\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  } // Next Slide\n\n\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  } // Prev Slide\n\n\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n\n  swiper.emitSlidesClasses();\n}","export default function updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}","import $ from '../../shared/dom.js';\nexport default function updateSlidesProgress(translate = this && this.translate || 0) {\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate; // Visible Slides\n\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n\n  swiper.visibleSlides = $(swiper.visibleSlides);\n}","export default function addSlide(index, slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n\n  const baseLength = swiper.slides.length;\n\n  if (index <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n\n  if (index >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n\n  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n  const slidesBuffer = [];\n\n  for (let i = baseLength - 1; i >= index; i -= 1) {\n    const currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    $wrapperEl.append(slidesBuffer[i]);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","export default function appendSlide(slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params\n  } = swiper;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n}","export default function prependSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n\n  let newActiveIndex = activeIndex + 1;\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.prepend(slides[i]);\n    }\n\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  swiper.slideTo(newActiveIndex, 0, false);\n}","export default function removeAllSlides() {\n  const swiper = this;\n  const slidesIndexes = [];\n\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n\n  swiper.removeSlide(slidesIndexes);\n}","export default function removeSlide(slidesIndexes) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    }\n\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!params.observer) {\n    swiper.update();\n  }\n\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","export default function classesToSelector(classes = '') {\n  return `.${classes.trim().replace(/([\\.:!\\/])/g, '\\\\$1') // eslint-disable-line\n  .replace(/ /g, '.')}`;\n}","import { getDocument } from 'ssr-window';\nexport default function createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document = getDocument();\n\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n\n        if (!element) {\n          element = document.createElement('div');\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n\n  return params;\n}","import $ from './dom.js';\nexport default function createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n\n  if (!$shadowEl.length) {\n    $shadowEl = $(`<div class=\"swiper-slide-shadow${side ? `-${side}` : ''}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n\n  return $shadowEl;\n}","import { $, addClass, removeClass, hasClass, toggleClass, attr, removeAttr, transform, transition, on, off, trigger, transitionEnd, outerWidth, outerHeight, styles, offset, css, each, html, text, is, index, eq, append, prepend, next, nextAll, prev, prevAll, parent, parents, closest, find, children, filter, remove } from 'dom7';\nconst Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  transform,\n  transition,\n  on,\n  off,\n  trigger,\n  transitionEnd,\n  outerWidth,\n  outerHeight,\n  styles,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove\n};\nObject.keys(Methods).forEach(methodName => {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nexport default $;","export default function effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    overwriteParams,\n    perspective\n  } = params;\n  on('beforeInit', () => {\n    if (swiper.params.effect !== effect) return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on('setTranslate', () => {\n    if (swiper.params.effect !== effect) return;\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    if (swiper.params.effect !== effect) return;\n    setTransition(duration);\n  });\n}","export default function effectTarget(effectParams, $slideEl) {\n  if (effectParams.transformEl) {\n    return $slideEl.find(effectParams.transformEl).css({\n      'backface-visibility': 'hidden',\n      '-webkit-backface-visibility': 'hidden'\n    });\n  }\n\n  return $slideEl;\n}","export default function effectVirtualTransitionEnd({\n  swiper,\n  duration,\n  transformEl,\n  allSlides\n}) {\n  const {\n    slides,\n    activeIndex,\n    $wrapperEl\n  } = swiper;\n\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let $transitionEndTarget;\n\n    if (allSlides) {\n      $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n    } else {\n      $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n    }\n\n    $transitionEndTarget.transitionEnd(() => {\n      if (eventTriggered) return;\n      if (!swiper || swiper.destroyed) return;\n      eventTriggered = true;\n      swiper.animating = false;\n      const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n\n      for (let i = 0; i < triggerEvents.length; i += 1) {\n        $wrapperEl.trigger(triggerEvents[i]);\n      }\n    });\n  }\n}","import { getWindow } from 'ssr-window';\nlet browser;\n\nfunction calcBrowser() {\n  const window = getWindow();\n\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\n\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n\n  return browser;\n}\n\nexport { getBrowser };","import { getWindow } from 'ssr-window';\nimport { getSupport } from './get-support.js';\nlet deviceCached;\n\nfunction calcDevice({\n  userAgent\n} = {}) {\n  const support = getSupport();\n  const window = getWindow();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel'; // iPadOs 13 fix\n\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  } // Android\n\n\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  } // Export object\n\n\n  return device;\n}\n\nfunction getDevice(overrides = {}) {\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n\n  return deviceCached;\n}\n\nexport { getDevice };","import { getWindow, getDocument } from 'ssr-window';\nlet support;\n\nfunction calcSupport() {\n  const window = getWindow();\n  const document = getDocument();\n  return {\n    smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n\n      try {\n        const opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          }\n\n        });\n        window.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {// No support\n      }\n\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return 'ongesturestart' in window;\n    }()\n  };\n}\n\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n\n  return support;\n}\n\nexport { getSupport };","import { getWindow } from 'ssr-window';\n\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {// no getter for object\n    }\n\n    try {\n      delete object[key];\n    } catch (e) {// something got wrong\n    }\n  });\n}\n\nfunction nextTick(callback, delay = 0) {\n  return setTimeout(callback, delay);\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction getComputedStyle(el) {\n  const window = getWindow();\n  let style;\n\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n\n  if (!style) {\n    style = el.style;\n  }\n\n  return style;\n}\n\nfunction getTranslate(el, axis = 'x') {\n  const window = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle(el, null);\n\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    } // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n\n\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n\n  return curTransform || 0;\n}\n\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\n\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\n\nfunction extend(...args) {\n  const to = Object(args[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n\n  for (let i = 1; i < args.length; i += 1) {\n    const nextSource = args[i];\n\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\n\nfunction animateCSSModeScroll({\n  swiper,\n  targetPosition,\n  side\n}) {\n  const window = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n\n  const animate = () => {\n    time = new Date().getTime();\n\n    if (startTime === null) {\n      startTime = time;\n    }\n\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n\n  animate();\n}\n\nexport { animateCSSModeScroll, deleteProps, nextTick, now, getTranslate, isObject, extend, getComputedStyle, setCSSProperty };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// import smoothscroll from \"smoothscroll-polyfill\"\r\nimport { burger } from \"./modules/burger.js\"\r\n// import { smoothScroll } from \"./modules/smoothScroll\"\r\n// import { addStylesToHeader } from \"./modules/addStylesToHeader\";\r\nimport { tabbis } from \"./modules/tabs.js\"\r\n\r\nimport Swiper from 'swiper';\r\nimport 'swiper/css';\r\n\r\n\r\n// Swiper.use([Navigation, Pagination, Scrollbar]);\r\n\r\n// slider(\r\n  //   \".slider__wrapper\",\r\n  //   \".slider__item\",\r\n  //   \".slider__prev\",\r\n  //   \".slider__next\",\r\n  //   \".dot\"\r\n  // )\r\n  \r\nburger(\".mobile-btn\", \".nav\", \".nav__link\", \"body\")\r\n// smoothscroll.polyfill()\r\n// smoothScroll(\".nav__link\");\r\n\r\n// addStylesToHeader(\".header\");\r\n\r\n// Tabs ===================================\r\ntabbis({\r\n  tabGroup: \"[tabs]\",\r\n  paneGroup: \"[tabs-content]\",\r\n})\r\n\r\n// Swiper ======================================================================\r\n\r\nconst swiper = new Swiper(\".swiper\", {\r\n  loop: true,\r\n  slidesPerView: 2,\r\n  spaceBetween: 20,\r\n  centeredSlides: true,\r\n  breakpoints: {\r\n    640: {\r\n      slidesPerView: 2,\r\n    },\r\n    768: {\r\n      slidesPerView: 4,\r\n    },\r\n    992: {\r\n      slidesPerView: 5,\r\n    },\r\n    1280: {\r\n      slidesPerView: 6,\r\n    },\r\n  },\r\n})\r\n\r\n// accordeon ======================================================================\r\n\r\nconst accordeons = document.querySelectorAll(\".accordeon-item__head\")\r\n\r\naccordeons.forEach((accordeon) => {\r\n  accordeon.addEventListener(\"click\", () => {\r\n    const accordeonActive = document.querySelector(\r\n      \".accordeon-item__head.active\"\r\n    )\r\n    const accordeonText = accordeon.nextElementSibling\r\n\r\n    accordeon.classList.toggle(\"active\")\r\n\r\n    if (accordeonActive && accordeonActive !== accordeon) {\r\n      accordeonActive.classList.toggle(\"active\")\r\n      accordeonActive.nextElementSibling.style.maxHeight = 0\r\n    }\r\n\r\n    if (accordeon.classList.contains(\"active\")) {\r\n      accordeonText.style.maxHeight = accordeonText.scrollHeight + \"px\"\r\n    } else {\r\n      accordeonText.style.maxHeight = 0\r\n    }\r\n  })\r\n})\r\n"],"names":["___CSS_LOADER_URL_IMPORT_0___","URL","___CSS_LOADER_EXPORT___","___CSS_LOADER_URL_REPLACEMENT_0___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","url","options","String","__esModule","default","test","slice","hash","needQuotes","replace","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","sourceURLs","sources","source","sourceRoot","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","burger","btn","nav","link","body","mobileBtn","navMenu","bodyPage","links","querySelectorAll","closeMenu","classList","addEventListener","toggle","forEach","key","tabbisClass","init","thisOptions","thisMemory","setup","panes","paneGroup","tabGroup","tabGroups","groupIndex","paneGroups","activeIndex","getActiveIndex","resetTabs","children","resetPanes","tabItem","tabIndex","paneItem","addTabAttributes","addPaneAttributes","trigger","activate","currentTarget","keyboardNavigation","eventKey","activateTab","activatePane","includes","keyCode","preventDefault","click","step","el","parentElement","indexOf","direction","resetTabindex","pos","focus","child","tab","emitEvent","pane","event","CustomEvent","bubbles","detail","dispatchEvent","groupTabs","memory","loadMemory","tabActive","tabActiveFallback","prefix","getAttribute","saveMemory","removeAttribute","tabs","parseInt","localStorage","setItem","store","getItem","parse","defaults","Object","assign","tabbis","Dom7","Array","constructor","items","super","proto","__proto__","defineProperty","get","set","value","makeReactive","arrayFlat","arr","res","isArray","arrayFilter","callback","prototype","filter","call","$","selector","context","getWindow","getDocument","html","trim","toCreate","tempParent","innerHTML","childNodes","a","qsa","nodeType","uniqueArray","arrayUnique","addClass","classes","classNames","c","split","add","removeClass","toggleClass","className","hasClass","contains","attr","attrs","arguments","attrName","removeAttr","transform","transition","duration","transitionDuration","on","args","eventType","targetSelector","listener","capture","handleLiveEvent","eventData","dom7EventData","unshift","is","parents","handleEvent","events","j","dom7LiveListeners","proxyListener","dom7Listeners","off","handlers","handler","dom7proxy","removeEventListener","evt","cancelable","dataIndex","transitionEnd","dom","fireCallBack","outerWidth","includeMargins","styles","offsetWidth","parseFloat","getPropertyValue","outerHeight","offsetHeight","offset","box","getBoundingClientRect","clientTop","clientLeft","scrollTop","scrollY","scrollLeft","scrollX","top","left","getComputedStyle","props","prop","each","text","textContent","compareWith","matches","webkitMatchesSelector","msMatchesSelector","previousSibling","eq","returnIndex","append","els","newChild","tempDiv","prepend","insertBefore","next","nextElementSibling","nextAll","nextEls","prev","previousElementSibling","prevAll","prevEls","parent","closest","find","foundElements","found","fn","noTrigger","shortcut","name","isObject","extend","src","keys","ssrDocument","activeElement","blur","nodeName","getElementById","createEvent","initEvent","getElementsByTagName","createElementNS","importNode","location","host","hostname","href","origin","pathname","protocol","search","doc","ssrWindow","navigator","userAgent","history","replaceState","pushState","go","back","Image","Date","screen","setTimeout","clearTimeout","matchMedia","requestAnimationFrame","cancelAnimationFrame","win","getBreakpoint","breakpoints","containerEl","breakpoint","currentHeight","innerHeight","clientHeight","points","point","minRatio","substr","sort","b","clientWidth","setBreakpoint","isGridEnabled","swiper","params","grid","rows","initialized","loopedSlides","$el","breakpointsBase","currentBreakpoint","breakpointParams","originalParams","wasMultiRow","isMultiRow","wasEnabled","enabled","containerModifierClass","emitContainerClasses","fill","directionChanged","needsReLoop","loop","slidesPerView","changeDirection","isEnabled","allowTouchMove","allowSlideNext","allowSlidePrev","disable","enable","emit","loopDestroy","loopCreate","updateSlides","slideTo","checkOverflow","isLocked","wasLocked","slidesOffsetBefore","lastSlideIndex","slides","lastSlideRightEdge","slidesGrid","slidesSizesGrid","size","snapGrid","isEnd","addClasses","rtl","device","support","suffixes","entries","resultClasses","prepareClasses","touch","freeMode","autoHeight","android","ios","cssMode","centeredSlides","removeClasses","prototypes","eventsEmitter","translate","slide","grabCursor","images","extendedDefaults","Swiper","swipers","newParams","__swiper__","getSupport","getDevice","browser","getBrowser","eventsListeners","eventsAnyListeners","__modules__","allModulesParams","mod","extendParams","bind","once","swiperParams","passedParams","eventName","onAny","isHorizontal","isVertical","realIndex","isBeginning","previousTranslate","progress","velocity","animating","touchEvents","desktop","touchEventsTouch","start","move","end","cancel","touchEventsDesktop","simulateTouch","touchEventsData","isTouched","isMoved","allowTouchCallbacks","touchStartTime","isScrolling","currentTranslate","startTranslate","allowThresholdMove","focusableElements","lastClickTime","now","clickTimeout","velocities","allowMomentumBounce","isTouchEvent","startMoving","allowClick","touches","startX","startY","currentX","currentY","diff","imagesToLoad","imagesLoaded","setGrabCursor","unsetGrabCursor","setProgress","speed","Math","min","max","minTranslate","current","maxTranslate","translateTo","updateActiveIndex","updateSlidesClasses","_emitClasses","cls","getSlideClasses","slideEl","slideClass","emitSlidesClasses","updates","slidesPerViewDynamic","view","exact","swiperSize","spv","breakLoop","slideSize","swiperSlideSize","destroyed","setTranslate","translateValue","rtlTranslate","newTranslate","translated","updateSize","updateProgress","updateAutoHeight","watchOverflow","newDirection","needUpdate","currentDirection","width","height","mount","mounted","getWrapperSelector","wrapperClass","$wrapperEl","shadowRoot","getWrapper","createElements","wrapper","wrapperEl","dir","toLowerCase","wrongRTL","preloadImages","initialSlide","runCallbacksOnInit","attachEvents","destroy","deleteInstance","cleanStyles","detachEvents","slideVisibleClass","slideActiveClass","slideNextClass","slidePrevClass","deleteProps","static","newDefaults","m","installModule","prototypeGroup","protoMethod","use","touchEventsTarget","updateOnWindowResize","resizeObserver","nested","preventInteractionOnTransition","edgeSwipeDetection","edgeSwipeThreshold","setWrapperSize","virtualTranslate","effect","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerGroupAuto","centeredSlidesBounds","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","roundLengths","touchRatio","touchAngle","shortSwipes","longSwipes","longSwipesRatio","longSwipesMs","followFinger","threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","resistance","resistanceRatio","watchSlidesProgress","preventClicks","preventClicksPropagation","slideToClickedSlide","updateOnImagesReady","loopAdditionalSlides","loopFillGroupWithBlank","loopPreventsSlide","rewind","swipeHandler","noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","slideBlankClass","slideDuplicateActiveClass","slideDuplicateClass","slideDuplicateNextClass","slideDuplicatePrevClass","priority","self","method","onceHandler","__emitterProxy","offAny","eventHandler","dummyEventAttached","dummyEventListener","domMethod","swiperMethod","passiveListener","passive","onTouchStart","onTouchMove","onTouchEnd","onClick","onScroll","stopPropagation","stopImmediatePropagation","onResize","autoplay","running","paused","run","newProgress","translatesDiff","originalEvent","touchEndTime","timeDiff","pathTree","path","composedPath","updateClickedSlide","nextTick","swipeDirection","currentPos","stopIndex","groupSize","increment","ratio","navigation","nextEl","prevEl","type","targetTouch","targetTouches","changedTouches","pageX","pageY","preventedByNestedSwiper","diffX","diffY","sqrt","atan2","abs","PI","loopFix","getTranslate","setTransition","disableParentSwiper","$targetEl","which","button","isTargetShadow","__closestFrom","assignedSlot","getRootNode","closestElement","iOSEdgeSwipeDetection","iOSEdgeSwipeThreshold","innerWidth","shouldPreventDefault","isContentEditable","moving","cursor","loadImage","imageEl","srcset","sizes","checkForComplete","image","onReady","complete","onload","onerror","currentSrc","$selector","blankSlidesNum","blankNode","ceil","prependSlides","appendSlides","cloneNode","newIndex","moduleExtendParams","moduleParamName","moduleParams","auto","Observer","observers","attach","observer","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","observe","childList","characterData","observeParents","observeSlideChildren","containerParents","disconnect","Resize","resizeHandler","orientationChangeHandler","ResizeObserver","newWidth","newHeight","contentBoxSize","contentRect","inlineSize","blockSize","unobserve","slideToLoop","slideNext","slidePrev","slideReset","slideToClosest","runCallbacks","internal","perGroup","_clientLeft","normalize","val","floor","normalizedTranslate","normalizedSnapGrid","prevSnap","prevSnapIndex","snap","snapIndex","prevIndex","initial","indexAsNumber","isFinite","slideIndex","previousIndex","skip","normalizedGrid","normalizedGridNext","transitionStart","isH","t","isVirtual","virtual","scrollSnapType","_immediateVirtual","_swiperImmediateVirtual","smoothScroll","animateCSSModeScroll","targetPosition","side","scrollTo","behavior","onSlideToWrapperTransitionEnd","slideToIndex","clickedIndex","clickedSlide","currentSnap","byController","transitionEmit","getSwiperTranslate","axis","x","y","translateBounds","onTranslateToWrapperTransitionEnd","updateSlidesOffset","updateSlidesProgress","newActiveIndex","previousRealIndex","previousSnapIndex","activeSlides","getSlideByIndex","visibleSlides","slideFound","multiplier","wasBeginning","wasEnd","Number","isNaN","getDirectionLabel","property","getDirectionPropertyValue","node","label","previousSlidesLength","slidesLength","offsetBefore","offsetAfter","previousSnapGridLength","previousSlidesGridLength","slidePosition","prevSlideSize","virtualSize","marginLeft","marginBottom","marginTop","marginRight","setCSSProperty","gridEnabled","initSlides","shouldResetSlideSize","updateSlide","slideStyles","currentTransform","currentWebKitTransform","webkitTransform","paddingLeft","paddingRight","boxSizing","updateWrapperSize","newSlidesGrid","slidesGridItem","_","allSlidesSize","slideSizeValue","maxSnap","allSlidesOffset","addToSnapGrid","addToSlidesGrid","v","activeSlide","nextSlide","prevSlide","swiperSlideOffset","offsetLeft","offsetTop","offsetCenter","visibleSlidesIndexes","slideOffset","slideProgress","originalSlideProgress","slideBefore","slideAfter","originalProgress","addSlide","activeIndexBuffer","baseLength","prependSlide","appendSlide","slidesBuffer","currentSlide","removeAllSlides","slidesIndexes","removeSlide","indexToRemove","classesToSelector","createElementIfNotDefined","checkProps","createShadow","$slideEl","shadowClass","$shadowContainer","transformEl","$shadowEl","Methods","methodName","writable","effectInit","overwriteParams","perspective","overwriteParamsResult","_s","effectTarget","effectParams","effectVirtualTransitionEnd","allSlides","$transitionEndTarget","eventTriggered","triggerEvents","isSafari","ua","isWebView","calcBrowser","deviceCached","overrides","platform","screenWidth","screenHeight","match","ipad","ipod","iphone","windows","macos","os","calcDevice","documentElement","DocumentTouch","supportsPassive","opts","gestures","calcSupport","object","delay","matrix","curTransform","transformMatrix","curStyle","currentStyle","WebKitCSSMatrix","MozTransform","OTransform","MsTransform","msTransform","m41","m42","o","to","noExtend","nextSource","HTMLElement","keysArray","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","varName","varValue","setProperty","startPosition","time","startTime","cssModeFrameID","isOutOfBound","animate","getTime","easeProgress","cos","currentPosition","overflow","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","d","definition","hasOwnProperty","baseURI","accordeon","accordeonActive","accordeonText","maxHeight","scrollHeight"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQWdCbnJCLG1CQUFtQjdPLE1BQU1rNkIsVUFBWSxHQUduREgsRUFBVXozQixVQUFVeUgsU0FBUyxVQUMvQmt3QixFQUFjajZCLE1BQU1rNkIsVUFBWUQsRUFBY0UsYUFBZSxLQUU3REYsRUFBY2o2QixNQUFNazZCLFVBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIubWluLmNzcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLm1pbi5jc3M/MzNmMCIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2J1cmdlci5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vc3JjL3NjcmlwdHMvbW9kdWxlcy90YWJzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvZG9tNy9kb203LmVzbS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvYnJlYWtwb2ludHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9zZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY2hlY2stb3ZlcmZsb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL2FkZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY2xhc3Nlcy9yZW1vdmVDbGFzc2VzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY29yZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2RlZmF1bHRzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzLWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25DbGljay5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblJlc2l6ZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblNjcm9sbC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblRvdWNoRW5kLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2dyYWItY3Vyc29yL2luZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZ3JhYi1jdXJzb3Ivc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2ltYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2ltYWdlcy9sb2FkSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9pbWFnZXMvcHJlbG9hZEltYWdlcy5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2xvb3BDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2xvb3BEZXN0cm95LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbG9vcC9sb29wRml4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlRXh0ZW5kUGFyYW1zLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL21vZHVsZXMvcmVzaXplL3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL2luZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVOZXh0LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVQcmV2LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVSZXNldC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlVG8uanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVUb0Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3NldFRyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25FbWl0LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uU3RhcnQuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL21heFRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9taW5UcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvc2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3RyYW5zbGF0ZVRvLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL2luZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUFjdGl2ZUluZGV4LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUF1dG9IZWlnaHQuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVByb2dyZXNzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNpemUuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzT2Zmc2V0LmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21ldGhvZHMvYWRkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hcHBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL3ByZXBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL3JlbW92ZUFsbFNsaWRlcy5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL3JlbW92ZVNsaWRlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZG9tLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2dldC1icm93c2VyLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtZGV2aWNlLmpzIiwid2VicGFjazovL3dlYnNpdGUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly93ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2Vic2l0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnNpdGUvLi9zcmMvc2NyaXB0cy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiZGF0YTphcHBsaWNhdGlvbi9mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsIGQwOUdSZ0FCQUFBQUFBWmdBQkFBQUFBQURBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCR1JsUk5BQUFHUkFBQUFCb0FBQUFjaTZxSGtVZEVSVVlBQUFXZ0FBQUFJd0FBQUNRQVlBQlhSMUJQVXdBQUJoUUFBQUF1QUFBQU51QVk3K3hIVTFWQ0FBQUZ4QUFBQUZBQUFBQm0yZlBjelU5VEx6SUFBQUhjQUFBQVNnQUFBR0JQOVY1UlkyMWhjQUFBQWtRQUFBQ0lBQUFCWXQ2RjBjQmpkblFnQUFBQ3pBQUFBQVFBQUFBRUFCRUJSR2RoYzNBQUFBV1lBQUFBQ0FBQUFBai8vd0FEWjJ4NVpnQUFBeXdBQUFETUFBQUQyTUh0cnlWb1pXRmtBQUFCYkFBQUFEQUFBQUEyRTIrZW9XaG9aV0VBQUFHY0FBQUFId0FBQUNRQzlnRHphRzEwZUFBQUFpZ0FBQUFaQUFBQXJnSmtBQkZzYjJOaEFBQUMwQUFBQUZvQUFBQmFGUUFVR0cxaGVIQUFBQUc4QUFBQUh3QUFBQ0FBY0FCQWJtRnRaUUFBQS9nQUFBRTVBQUFDWHZGZEJ3bHdiM04wQUFBRk5BQUFBR0lBQUFDRTVzNzRoWGphWTJCa1lHQUFZcGY1SHUvaitXMitNbkF6TVlEQXphWDZRakQ2LzQvL0J4ajVHQThBdVJ3TVlHa0FQeXdMMTNqYVkyQmtZR0E4OFA4QWd4NGorLzhmUURZZkExQUVCV2dEQUlCMkJPb0FlTnBqWUdSZ1lOQmg0R2RnWWdBQkVNbklBQkp6WU5BRENRQUFDV2dBc1FCNDJtTmdZZnpDT0lHQmxZR0IwWWN4allHQndSMUtmMldRWkdoaFlHQmlZR1ZtZ0FGR0JpUVFrT2Fhd3REQW9NQlF4WGpnL3dFR1BjWUREQTR3TlVBMkNDZ3dzQUFBTzRFTDZnQUFlTnBqMk0wZ3lBQUNxeGdHTldCa1oyRDQvd01BK3hrRGRnQUFBSGphWTJCZ1lHYUFZQmtHUmdZUWlBSHlHTUY4RmdZSElNM0R3TUhBQkdRck1PZ3lXRExFTTFUOS93OFVCZkVNZ0x6RS8vLy9QLzUvL2YvVi94dityNGVhQUFlTWJBeHdJVVltSU1IRWdLWUFZalVjc0RBd3NMS3hjM0J5Y2ZQdzhqRVFBL2daQkFTRmhFVkV4Y1FsSktXa1pXVGw1QlVVbFpSVlZOWFVOVFFaQmdNQUFNUitFK2dBRVFGRUFBQUFLZ0FxQUNvQU5BQStBRWdBVWdCY0FHWUFjQUI2QUlRQWpnQ1lBS0lBckFDMkFNQUF5Z0RVQU40QTZBRHlBUHdCQmdFUUFSb0JKQUV1QVRnQlFnRk1BVllCWUFGcUFYUUJmZ0dJQVpJQm5BR21BYklCemdIc0FBQjQydTJOTVE2Q1VBeUdXNTY4eDlBbmVZWWdtNE1KYmhLRmFFeElPQVZYOEFwZXdTdDRCaWM0QWZlQWlkM1ZPQml4RHhmUFlFemE1TytYZmkwNFlBRGdnaVVJVUxDdUVKSzhWaE80YlN2cGRua3RISTVRQ1l0ZGkyc2w4Wm5YYUhscVVyTkt6ZEtjVDhjamxxK3J3WlN2SVZjek5pZXpzZm5QL3V6bm1mUEZCTk9ETTJLN01UUTQ1WUVBWnFHUDgxQW1HR2NGM2lQcU9vcDByMVNQVGFUYlZrZlVlNEhYajk3d1lFK3lOd1dZeHdXdTR2MXVnV0hnbzNTMVhkWkVWcVdNN0VUMGNmbkxHeFdma2dSNDJvMlB2V3JETUJTRmovSUhMYUYwektqUmdkaVZNd1NjTlJBb1dVb0g3OFkyaWNCL3lJWTA5QW42QUgyQmR1L1VCK3l4b3BZc2hRaUV2bnZ1MGRVUmdEdDhRZUM4UER3N0ZwamkzZkVBNHovUEVKNllPQjVoS2g0ZGozRXZYaHhQcUgvU0tVWTNySjdzclo0RlpuaDFQTUF0UGh3UDZmbDJQTUpNUERnZVE0clk4WVQ2R3phbzBlQUVBNDA5RHVnZ21UbkZuT2NTQ2lFaUxNZ3hDaVRJNkNxNURaVWQzUW1wMTB2TzBMYUxUZDJjak40Zk91bWxjN2xVWWJTUWNaRmt1dFJHN2c2SktaS3kwUm1kTFk2ODBDRG5FSitVTWtwRkZlMVJON254ZFZwWHJDNGFUdG5hdXJPblllcmNaZzJZVm1MTi9kL2djemZFaW1yRS9mcy9iT3VxMjlabW44dGxvT1JhWGdaZ0dhNzh5TzkvY25YbTJCcGFHdnEyNUR2OVM0RTkrNVNJYzlQcXVwSktoWUZTU2w0NytRY3IxbVlOQUFBQWVOcHR3MGNLd2tBQUFNRFpKQThRN09VSnZrTHNQZlo2ekZWRVJQeThxSGgyWUVSKzNpL0JQODN2SUJMTHlTc29LaW1ycUtxcGEyaHA2K2pxNlJzWUdobWJtSnFaU3kwc3JheHRiTzNzSFJ5ZG5FTVU0dVI2eXg3SkpYdmVQN1dyRHljQUFBQUFBQUgvL3dBQ2VOcGpZR1JnWU9BQlloa2daZ0pDWmdaTkJrWUdMUVp0SUpzRkxNWUFBQXczQUxnQWVOb2xpekVLZ0RBUUJDY2hSYkMyc0ZFUjBZRDZxVlFpQkN2L0g5ZXpHSTZaNVhCQXc4Q0JLL201aVFRVmF1VmJYTG5Pck1adjJvTGRLRmE4UGp1cnUyaEp6R2FibU9TTHpOTXp2dXRwQjNONDJtTmdaR0JnNEdLUVl6QmhZTXhKTE1sajRHQmdBWW93L1AvUEFKSmhMTTZzU29XS2ZXQ0FBd0RBamdiUkFBQjQybU5nWUdCa0FJSWJDWm81SVBybVVuMGhHQTBBTzhFRlRRQUFcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKipcXG4gKiBTd2lwZXIgNy40LjFcXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xcbiAqIGh0dHBzOi8vc3dpcGVyanMuY29tXFxuICpcXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIxIFZsYWRpbWlyIEtoYXJsYW1waWRpXFxuICpcXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcXG4gKlxcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAyNCwgMjAyMVxcbiAqL1xcblxcbkBmb250LWZhY2V7Zm9udC1mYW1pbHk6c3dpcGVyLWljb25zO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH06cm9vdHstLXN3aXBlci10aGVtZS1jb2xvcjojMDA3YWZmfS5zd2lwZXJ7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW47bGlzdC1zdHlsZTpub25lO3BhZGRpbmc6MDt6LWluZGV4OjF9LnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXdyYXBwZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5zd2lwZXItd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MTtkaXNwbGF5OmZsZXg7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm07Ym94LXNpemluZzpjb250ZW50LWJveH0uc3dpcGVyLWFuZHJvaWQgLnN3aXBlci1zbGlkZSwuc3dpcGVyLXdyYXBwZXJ7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDBweCwwLDApfS5zd2lwZXItcG9pbnRlci1ldmVudHN7dG91Y2gtYWN0aW9uOnBhbi15fS5zd2lwZXItcG9pbnRlci1ldmVudHMuc3dpcGVyLXZlcnRpY2Fse3RvdWNoLWFjdGlvbjpwYW4teH0uc3dpcGVyLXNsaWRle2ZsZXgtc2hyaW5rOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX0uc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFua3t2aXNpYmlsaXR5OmhpZGRlbn0uc3dpcGVyLWF1dG9oZWlnaHQsLnN3aXBlci1hdXRvaGVpZ2h0IC5zd2lwZXItc2xpZGV7aGVpZ2h0OmF1dG99LnN3aXBlci1hdXRvaGVpZ2h0IC5zd2lwZXItd3JhcHBlcnthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtLGhlaWdodH0uc3dpcGVyLTNkLC5zd2lwZXItM2Quc3dpcGVyLWNzcy1tb2RlIC5zd2lwZXItd3JhcHBlcntwZXJzcGVjdGl2ZToxMjAwcHh9LnN3aXBlci0zZCAuc3dpcGVyLWN1YmUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZSwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLC5zd2lwZXItM2QgLnN3aXBlci13cmFwcGVye3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZH0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCwuc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9we3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7ei1pbmRleDoxMH0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93e2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMTUpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdHtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byBsZWZ0LHJnYmEoMCwwLDAsLjUpLHJnYmEoMCwwLDAsMCkpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHR7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQscmdiYSgwLDAsMCwuNSkscmdiYSgwLDAsMCwwKSl9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3B7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gdG9wLHJnYmEoMCwwLDAsLjUpLHJnYmEoMCwwLDAsMCkpfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9te2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSxyZ2JhKDAsMCwwLC41KSxyZ2JhKDAsMCwwLDApKX0uc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntvdmVyZmxvdzphdXRvO3Njcm9sbGJhci13aWR0aDpub25lOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lfS5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVyOjotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9LnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZXtzY3JvbGwtc25hcC1hbGlnbjpzdGFydCBzdGFydH0uc3dpcGVyLWhvcml6b250YWwuc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntzY3JvbGwtc25hcC10eXBlOnggbWFuZGF0b3J5fS5zd2lwZXItdmVydGljYWwuc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcntzY3JvbGwtc25hcC10eXBlOnkgbWFuZGF0b3J5fS5zd2lwZXItY2VudGVyZWQ+LnN3aXBlci13cmFwcGVyOjpiZWZvcmV7Y29udGVudDonJztmbGV4LXNocmluazowO29yZGVyOjk5OTl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItaG9yaXpvbnRhbD4uc3dpcGVyLXdyYXBwZXI+LnN3aXBlci1zbGlkZTpmaXJzdC1jaGlsZHttYXJnaW4taW5saW5lLXN0YXJ0OnZhcigtLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlKX0uc3dpcGVyLWNlbnRlcmVkLnN3aXBlci1ob3Jpem9udGFsPi5zd2lwZXItd3JhcHBlcjo6YmVmb3Jle2hlaWdodDoxMDAlO21pbi1oZWlnaHQ6MXB4O3dpZHRoOnZhcigtLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXIpfS5zd2lwZXItY2VudGVyZWQuc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItd3JhcHBlcj4uc3dpcGVyLXNsaWRlOmZpcnN0LWNoaWxke21hcmdpbi1ibG9jay1zdGFydDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZSl9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItdmVydGljYWw+LnN3aXBlci13cmFwcGVyOjpiZWZvcmV7d2lkdGg6MTAwJTttaW4td2lkdGg6MXB4O2hlaWdodDp2YXIoLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyKX0uc3dpcGVyLWNlbnRlcmVkPi5zd2lwZXItd3JhcHBlcj4uc3dpcGVyLXNsaWRle3Njcm9sbC1zbmFwLWFsaWduOmNlbnRlciBjZW50ZXJ9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIubWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7Ozs7Ozs7OztFQVVFOztBQUVGLFdBQVcsd0JBQXdCLENBQUMsMkNBQTRyRSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLDRCQUE0QixDQUFDLFFBQVEsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsaUJBQWlCLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLDZCQUE2QixDQUFDLHNCQUFzQixDQUFDLDhDQUE4Qyw4QkFBOEIsQ0FBQyx1QkFBdUIsa0JBQWtCLENBQUMsdUNBQXVDLGtCQUFrQixDQUFDLGNBQWMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsNkJBQTZCLENBQUMsOEJBQThCLGlCQUFpQixDQUFDLG9EQUFvRCxXQUFXLENBQUMsbUNBQW1DLHNCQUFzQixDQUFDLG9DQUFvQyxDQUFDLHNEQUFzRCxrQkFBa0IsQ0FBQyx5UUFBeVEsMkJBQTJCLENBQUMsc0xBQXNMLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsZ0NBQWdDLDBCQUEwQixDQUFDLHFDQUFxQyxzRUFBc0UsQ0FBQyxzQ0FBc0MsdUVBQXVFLENBQUMsb0NBQW9DLHFFQUFxRSxDQUFDLHVDQUF1Qyx3RUFBd0UsQ0FBQyxpQ0FBaUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLHVCQUF1QixDQUFDLG9EQUFvRCxZQUFZLENBQUMsK0NBQStDLDZCQUE2QixDQUFDLG1EQUFtRCw0QkFBNEIsQ0FBQyxpREFBaUQsNEJBQTRCLENBQUMseUNBQXlDLFVBQVUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLDZFQUE2RSx3REFBd0QsQ0FBQywyREFBMkQsV0FBVyxDQUFDLGNBQWMsQ0FBQyx5Q0FBeUMsQ0FBQywyRUFBMkUsdURBQXVELENBQUMseURBQXlELFVBQVUsQ0FBQyxhQUFhLENBQUMsMENBQTBDLENBQUMsK0NBQStDLCtCQUErQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKipcXG4gKiBTd2lwZXIgNy40LjFcXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xcbiAqIGh0dHBzOi8vc3dpcGVyanMuY29tXFxuICpcXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIxIFZsYWRpbWlyIEtoYXJsYW1waWRpXFxuICpcXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcXG4gKlxcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAyNCwgMjAyMVxcbiAqL1xcblxcbkBmb250LWZhY2V7Zm9udC1mYW1pbHk6c3dpcGVyLWljb25zO3NyYzp1cmwoJ2RhdGE6YXBwbGljYXRpb24vZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCBkMDlHUmdBQkFBQUFBQVpnQUJBQUFBQUFEQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkdSbFJOQUFBR1JBQUFBQm9BQUFBY2k2cUhrVWRFUlVZQUFBV2dBQUFBSXdBQUFDUUFZQUJYUjFCUFV3QUFCaFFBQUFBdUFBQUFOdUFZNyt4SFUxVkNBQUFGeEFBQUFGQUFBQUJtMmZQY3pVOVRMeklBQUFIY0FBQUFTZ0FBQUdCUDlWNVJZMjFoY0FBQUFrUUFBQUNJQUFBQll0NkYwY0JqZG5RZ0FBQUN6QUFBQUFRQUFBQUVBQkVCUkdkaGMzQUFBQVdZQUFBQUNBQUFBQWovL3dBRFoyeDVaZ0FBQXl3QUFBRE1BQUFEMk1IdHJ5Vm9aV0ZrQUFBQmJBQUFBREFBQUFBMkUyK2VvV2hvWldFQUFBR2NBQUFBSHdBQUFDUUM5Z0R6YUcxMGVBQUFBaWdBQUFBWkFBQUFyZ0prQUJGc2IyTmhBQUFDMEFBQUFGb0FBQUJhRlFBVUdHMWhlSEFBQUFHOEFBQUFId0FBQUNBQWNBQkFibUZ0WlFBQUEvZ0FBQUU1QUFBQ1h2RmRCd2x3YjNOMEFBQUZOQUFBQUdJQUFBQ0U1czc0aFhqYVkyQmtZR0FBWXBmNUh1L2orVzIrTW5Bek1ZREF6YVg2UWpENi80Ly9CeGo1R0E4QXVSd01ZR2tBUHl3TDEzamFZMkJrWUdBODhQOEFneDRqKy84ZlFEWWZBMUFFQldnREFJQjJCT29BZU5wallHUmdZTkJoNEdkZ1lnQUJFTW5JQUJKellOQURDUUFBQ1dnQXNRQjQybU5nWWZ6Q09JR0JsWUdCMFljeGpZR0J3UjFLZjJXUVpHaGhZR0JpWUdWbWdBRkdCaVFRa09hYXd0REFvTUJReFhqZy93RUdQY1lEREE0d05VQTJDQ2d3c0FBQU80RUw2Z0FBZU5wajJNMGd5QUFDcXhnR05XQmtaMkQ0L3dNQSt4a0RkZ0FBQUhqYVkyQmdZR2FBWUJrR1JnWVFpQUh5R01GOEZnWUhJTTNEd01IQUJHUXJNT2d5V0RMRU0xVDkvdzhVQmZFTWdMekUvLy8vUC81Ly9mL1YveHYrcjRlYUFBZU1iQXh3SVVZbUlNSEVnS1lBWWpVY3NEQXdzTEt4YzNCeWNmUHc4akVRQS9nWkJBU0ZoRVZFeGNRbEpLV2taV1RsNUJVVWxaUlZWTlhVTlRRWkJnTUFBTVIrRStnQUVRRkVBQUFBS2dBcUFDb0FOQUErQUVnQVVnQmNBR1lBY0FCNkFJUUFqZ0NZQUtJQXJBQzJBTUFBeWdEVUFONEE2QUR5QVB3QkJnRVFBUm9CSkFFdUFUZ0JRZ0ZNQVZZQllBRnFBWFFCZmdHSUFaSUJuQUdtQWJJQnpnSHNBQUI0MnUyTk1RNkNVQXlHVzU2OHg5QW5lWVlnbTRNSmJoS0ZhRXhJT0FWWDhBcGV3U3Q0QmljNEFmZUFpZDNWT0JpeER4ZlBZRXphNU8rWGZpMDRZQURnZ2lVSVVMQ3VFSks4VmhPNGJTdnBkbmt0SEk1UUNZdGRpMnNsOFpuWGFIbHFVck5LemRLY1Q4Y2pscStyd1pTdklWY3pOaWV6c2ZuUC91em5tZlBGQk5PRE0ySzdNVFE0NVlFQVpxR1A4MUFtR0djRjNpUHFPb3AwcjFTUFRhVGJWa2ZVZTRIWGo5N3dZRSt5TndXWXh3V3U0djF1Z1dIZ28zUzFYZFpFVnFXTTdFVDBjZm5MR3hXZmtnUjQybzJQdldyRE1CU0ZqL0lITGFGMHpLalJnZGlWTXdTY05SQW9XVW9INzhZMmljQi95SVkwOUFuNkFIMkJkdS9VQit5eG9wWXNoUWlFdm52dTBkVVJnRHQ4UWVDOFBEdzdGcGppM2ZFQTR6L1BFSjZZT0I1aEtoNGRqM0V2WGh4UHFIL1NLVVkzcko3c3JaNEZabmgxUE1BdFBod1A2ZmwyUE1KTVBEZ2VRNHJZOFlUNkd6YW8wZUFFQTQwOUR1Z2dtVG5Gbk9jU0NpRWlMTWd4Q2lUSTZDcTVEWlVkM1FtcDEwdk8wTGFMVGQyY2pONGZPdW1sYzdsVVliU1FjWkZrdXRSRzdnNkpLWkt5MFJtZExZNjgwQ0RuRUorVU1rcEZGZTFSTjdueGRWcFhyQzRhVHRuYXVyT25ZZXJjWmcyWVZtTE4vZC9nY3pmRWltckUvZnMvYk91cTI5Wm1uOHRsb09SYVhnWmdHYTc4eU85L2NuWG0yQnBhR3ZxMjVEdjlTNEU5KzVTSWM5UHF1cEpLaFlGU1NsNDcrUWNyMW1ZTkFBQUFlTnB0dzBjS3drQUFBTURaSkE4UTdPVUp2a0xzUGZaNnpGVkVSUHk4cUhoMllFUiszaS9CUDgzdklCTEx5U3NvS2ltcnFLcXBhMmhwNitqcTZSc1lHaG1ibUpxWlN5MHNyYXh0Yk8zc0hSeWRuRU1VNHVSNnl4N0pKWHZlUDdXckR5Y0FBQUFBQUFILy93QUNlTnBqWUdSZ1lPQUJZaGtnWmdKQ1pnWk5Ca1lHTFFadElKc0ZMTVlBQUF3M0FMZ0FlTm9saXpFS2dEQVFCQ2NoUmJDMnNGRVIwWUQ2cVZRaUJDdi9IOWV6R0k2WjVYQkF3OENCSy9tNWlRUVZhdVZiWExuT3JNWnYyb0xkS0ZhOFBqdXJ1MmhKekdhYm1PU0x6Tk16dnV0cEIzTjQybU5nWkdCZzRHS1FZekJoWU14SkxNbGo0R0JnQVlvdy9QL1BBSkpoTE02c1NvV0tmV0NBQXdEQWpnYlJBQUI0Mm1OZ1lHQmtBSUliQ1pvNUlQcm1VbjBoR0EwQU84RUZUUUFBJyk7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfTpyb290ey0tc3dpcGVyLXRoZW1lLWNvbG9yOiMwMDdhZmZ9LnN3aXBlcnttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbjtsaXN0LXN0eWxlOm5vbmU7cGFkZGluZzowO3otaW5kZXg6MX0uc3dpcGVyLXZlcnRpY2FsPi5zd2lwZXItd3JhcHBlcntmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnN3aXBlci13cmFwcGVye3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxO2Rpc3BsYXk6ZmxleDt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybTtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5zd2lwZXItYW5kcm9pZCAuc3dpcGVyLXNsaWRlLC5zd2lwZXItd3JhcHBlcnt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMHB4LDAsMCl9LnN3aXBlci1wb2ludGVyLWV2ZW50c3t0b3VjaC1hY3Rpb246cGFuLXl9LnN3aXBlci1wb2ludGVyLWV2ZW50cy5zd2lwZXItdmVydGljYWx7dG91Y2gtYWN0aW9uOnBhbi14fS5zd2lwZXItc2xpZGV7ZmxleC1zaHJpbms6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtfS5zd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5re3Zpc2liaWxpdHk6aGlkZGVufS5zd2lwZXItYXV0b2hlaWdodCwuc3dpcGVyLWF1dG9oZWlnaHQgLnN3aXBlci1zbGlkZXtoZWlnaHQ6YXV0b30uc3dpcGVyLWF1dG9oZWlnaHQgLnN3aXBlci13cmFwcGVye2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0saGVpZ2h0fS5zd2lwZXItM2QsLnN3aXBlci0zZC5zd2lwZXItY3NzLW1vZGUgLnN3aXBlci13cmFwcGVye3BlcnNwZWN0aXZlOjEyMDBweH0uc3dpcGVyLTNkIC5zd2lwZXItY3ViZS1zaGFkb3csLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3csLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsLnN3aXBlci0zZCAuc3dpcGVyLXdyYXBwZXJ7dHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3csLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0LC5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsLnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3B7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9pbnRlci1ldmVudHM6bm9uZTt6LWluZGV4OjEwfS5zd2lwZXItM2QgLnN3aXBlci1zbGlkZS1zaGFkb3d7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4xNSl9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0e2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHRvIGxlZnQscmdiYSgwLDAsMCwuNSkscmdiYSgwLDAsMCwwKSl9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodHtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byByaWdodCxyZ2JhKDAsMCwwLC41KSxyZ2JhKDAsMCwwLDApKX0uc3dpcGVyLTNkIC5zd2lwZXItc2xpZGUtc2hhZG93LXRvcHtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCh0byB0b3AscmdiYSgwLDAsMCwuNSkscmdiYSgwLDAsMCwwKSl9LnN3aXBlci0zZCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b217YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLHJnYmEoMCwwLDAsLjUpLHJnYmEoMCwwLDAsMCkpfS5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVye292ZXJmbG93OmF1dG87c2Nyb2xsYmFyLXdpZHRoOm5vbmU7LW1zLW92ZXJmbG93LXN0eWxlOm5vbmV9LnN3aXBlci1jc3MtbW9kZT4uc3dpcGVyLXdyYXBwZXI6Oi13ZWJraXQtc2Nyb2xsYmFye2Rpc3BsYXk6bm9uZX0uc3dpcGVyLWNzcy1tb2RlPi5zd2lwZXItd3JhcHBlcj4uc3dpcGVyLXNsaWRle3Njcm9sbC1zbmFwLWFsaWduOnN0YXJ0IHN0YXJ0fS5zd2lwZXItaG9yaXpvbnRhbC5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVye3Njcm9sbC1zbmFwLXR5cGU6eCBtYW5kYXRvcnl9LnN3aXBlci12ZXJ0aWNhbC5zd2lwZXItY3NzLW1vZGU+LnN3aXBlci13cmFwcGVye3Njcm9sbC1zbmFwLXR5cGU6eSBtYW5kYXRvcnl9LnN3aXBlci1jZW50ZXJlZD4uc3dpcGVyLXdyYXBwZXI6OmJlZm9yZXtjb250ZW50OicnO2ZsZXgtc2hyaW5rOjA7b3JkZXI6OTk5OX0uc3dpcGVyLWNlbnRlcmVkLnN3aXBlci1ob3Jpem9udGFsPi5zd2lwZXItd3JhcHBlcj4uc3dpcGVyLXNsaWRlOmZpcnN0LWNoaWxke21hcmdpbi1pbmxpbmUtc3RhcnQ6dmFyKC0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUpfS5zd2lwZXItY2VudGVyZWQuc3dpcGVyLWhvcml6b250YWw+LnN3aXBlci13cmFwcGVyOjpiZWZvcmV7aGVpZ2h0OjEwMCU7bWluLWhlaWdodDoxcHg7d2lkdGg6dmFyKC0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcil9LnN3aXBlci1jZW50ZXJlZC5zd2lwZXItdmVydGljYWw+LnN3aXBlci13cmFwcGVyPi5zd2lwZXItc2xpZGU6Zmlyc3QtY2hpbGR7bWFyZ2luLWJsb2NrLXN0YXJ0OnZhcigtLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlKX0uc3dpcGVyLWNlbnRlcmVkLnN3aXBlci12ZXJ0aWNhbD4uc3dpcGVyLXdyYXBwZXI6OmJlZm9yZXt3aWR0aDoxMDAlO21pbi13aWR0aDoxcHg7aGVpZ2h0OnZhcigtLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXIpfS5zd2lwZXItY2VudGVyZWQ+LnN3aXBlci13cmFwcGVyPi5zd2lwZXItc2xpZGV7c2Nyb2xsLXNuYXAtYWxpZ246Y2VudGVyIGNlbnRlcn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zd2lwZXIubWluLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zd2lwZXIubWluLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJleHBvcnQgZnVuY3Rpb24gYnVyZ2VyKGJ0biwgbmF2LCBsaW5rLCBib2R5KSB7XG4gIGNvbnN0IG1vYmlsZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYnRuKVxuICBjb25zdCBuYXZNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYXYpXG4gIGNvbnN0IGJvZHlQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihib2R5KVxuICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobGluaylcblxuICBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgIG1vYmlsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwibW9iaWxlLWJ0bi1hY3RpdmVcIilcbiAgICBuYXZNZW51LmNsYXNzTGlzdC50b2dnbGUoXCJuYXYtLWFjdGl2ZVwiKVxuICAgIGJvZHlQYWdlLmNsYXNzTGlzdC50b2dnbGUoXCJkaXNhYmxlLXNjcm9sbFwiKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VNZW51KCkge1xuICAgIG1vYmlsZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwibW9iaWxlLWJ0bi1hY3RpdmVcIilcbiAgICBuYXZNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJuYXYtLWFjdGl2ZVwiKVxuICAgIGJvZHlQYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlLXNjcm9sbFwiKVxuICB9XG5cbiAgaWYgKG1vYmlsZUJ0bikge1xuICAgIG1vYmlsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdG9nZ2xlTWVudSlcbiAgfVxuXG4gIGlmIChsaW5rcykge1xuICAgIGxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlTWVudSlcbiAgICB9KVxuICB9XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGlmKGUudGFyZ2V0LmNsYXNzTGlzdCA9PSAnZGlzYWJsZS1zY3JvbGwnKSB7XG4gICAgICBjbG9zZU1lbnUoKVxuICAgIH1cbiAgfSlcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICBpZihlLmtleSA9PSBcIkVzY2FwZVwiKSB7XG4gICAgICBjbG9zZU1lbnUoKVxuICAgIH1cbiAgfSlcbn1cbiIsImV4cG9ydCBjbGFzcyB0YWJiaXNDbGFzcyB7XG5cdGluaXQob3B0aW9ucykge1xuXHRcdHRoaXMudGhpc09wdGlvbnMob3B0aW9ucyk7XG5cdFx0dGhpcy50aGlzTWVtb3J5KCk7XG5cdFx0dGhpcy5zZXR1cCgpO1xuXHR9XG5cblx0Ly8gU2V0dXBcblx0c2V0dXAoKSB7XG5cdFx0Y29uc3QgcGFuZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMub3B0aW9ucy5wYW5lR3JvdXApO1xuXHRcdGNvbnN0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMub3B0aW9ucy50YWJHcm91cCk7XG5cblx0XHR0YWJzLmZvckVhY2goKHRhYkdyb3VwcywgZ3JvdXBJbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgcGFuZUdyb3VwcyA9IHBhbmVzW2dyb3VwSW5kZXhdO1xuXHRcdFx0Y29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KHRhYkdyb3VwcywgZ3JvdXBJbmRleCk7XG5cblx0XHRcdHRhYkdyb3Vwcy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFibGlzdCcpO1xuXG5cdFx0XHQvLyBSZXNldCBpdGVtc1xuXHRcdFx0dGhpcy5yZXNldFRhYnMoWyAuLi50YWJHcm91cHMuY2hpbGRyZW4gXSk7XG5cdFx0XHR0aGlzLnJlc2V0UGFuZXMoWyAuLi5wYW5lR3JvdXBzLmNoaWxkcmVuIF0pO1xuXG4gICAgICBcbiAgICAgIC8vIFJlbW92ZSB0YWIgYXR0cmlidXRlc1xuICAgICAgLy8gcmVzZXRUYWJzKHRhYnMpIHtcbiAgICAgIC8vIFx0dGFicy5mb3JFYWNoKChlbCkgPT4gZWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJykpO1xuICAgICAgLy8gXHR0aGlzLnJlc2V0VGFiaW5kZXgodGFicyk7XG4gICAgICAvLyB9XG5cbiAgICAgIC8vIC8vIFJlc2V0IHBhbmUgYXR0cmlidXRlc1xuICAgICAgLy8gcmVzZXRQYW5lcyhwYW5lcykge1xuICAgICAgLy8gXHRwYW5lcy5mb3JFYWNoKChlbCkgPT4gZWwuc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJykpO1xuICAgICAgLy8gfVxuXG5cdFx0XHRbIC4uLnRhYkdyb3Vwcy5jaGlsZHJlbiBdLmZvckVhY2goKHRhYkl0ZW0sIHRhYkluZGV4KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHBhbmVJdGVtID0gcGFuZUdyb3Vwcy5jaGlsZHJlblt0YWJJbmRleF07XG5cblx0XHRcdFx0Ly8gQWRkIGF0dHJpYnV0ZXNcblx0XHRcdFx0dGhpcy5hZGRUYWJBdHRyaWJ1dGVzKHRhYkl0ZW0sIGdyb3VwSW5kZXgpO1xuXHRcdFx0XHR0aGlzLmFkZFBhbmVBdHRyaWJ1dGVzKHRhYkl0ZW0sIHBhbmVJdGVtKTtcblxuXHRcdFx0XHR0YWJJdGVtLmdyb3VwSW5kZXggPSBncm91cEluZGV4O1xuXG5cdFx0XHRcdC8vIFRyaWdnZXIgZXZlbnRcblx0XHRcdFx0dGFiSXRlbS5hZGRFdmVudExpc3RlbmVyKHRoaXMub3B0aW9ucy50cmlnZ2VyLCAoZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuYWN0aXZhdGUoZS5jdXJyZW50VGFyZ2V0LCB0YWJJdGVtLmdyb3VwSW5kZXgpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBLZXkgZXZlbnRcblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5rZXlib2FyZE5hdmlnYXRpb24pIHtcblx0XHRcdFx0XHR0YWJJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5ldmVudEtleShlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChhY3RpdmVJbmRleCAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLmFjdGl2YXRlVGFiKFsgLi4udGFiR3JvdXBzLmNoaWxkcmVuIF1bYWN0aXZlSW5kZXhdKTtcblx0XHRcdFx0dGhpcy5hY3RpdmF0ZVBhbmUoWyAuLi5wYW5lR3JvdXBzLmNoaWxkcmVuIF1bYWN0aXZlSW5kZXhdKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIEV2ZW50IGtleVxuXHRldmVudEtleShlKSB7XG5cdFx0aWYgKFsgMTMsIDM3LCAzOCwgMzksIDQwIF0uaW5jbHVkZXMoZS5rZXlDb2RlKSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdGlmIChlLmtleUNvZGUgPT0gMTMpIHtcblx0XHRcdGUuY3VycmVudFRhcmdldC5jbGljaygpO1xuXHRcdH0gZWxzZSBpZiAoWyAzOSwgNDAgXS5pbmNsdWRlcyhlLmtleUNvZGUpKSB7XG5cdFx0XHR0aGlzLnN0ZXAoZSwgMSk7XG5cdFx0fSBlbHNlIGlmIChbIDM3LCAzOCBdLmluY2x1ZGVzKGUua2V5Q29kZSkpIHtcblx0XHRcdHRoaXMuc3RlcChlLCAtMSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSW5kZXhcblx0aW5kZXgoZWwpIHtcblx0XHRyZXR1cm4gWyAuLi5lbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuIF0uaW5kZXhPZihlbCk7XG5cdH1cblxuXHQvLyBTdGVwXG5cdHN0ZXAoZSwgZGlyZWN0aW9uKSB7XG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBlLmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5jaGlsZHJlbjtcblx0XHR0aGlzLnJlc2V0VGFiaW5kZXgoY2hpbGRyZW4pO1xuXG5cdFx0bGV0IGVsID0gY2hpbGRyZW5bdGhpcy5wb3MoZS5jdXJyZW50VGFyZ2V0LCBjaGlsZHJlbiwgZGlyZWN0aW9uKV07XG5cdFx0ZWwuZm9jdXMoKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG5cdH1cblxuXHRyZXNldFRhYmluZGV4KGNoaWxkcmVuKSB7XG5cdFx0WyAuLi5jaGlsZHJlbiBdLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRjaGlsZC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBQb3Ncblx0cG9zKHRhYiwgY2hpbGRyZW4sIGRpcmVjdGlvbikge1xuXHRcdGxldCBwb3MgPSB0aGlzLmluZGV4KHRhYik7XG5cdFx0cG9zICs9IGRpcmVjdGlvbjtcblxuXHRcdGlmIChjaGlsZHJlbi5sZW5ndGggPD0gcG9zKSB7XG5cdFx0XHRwb3MgPSAwO1xuXHRcdH0gZWxzZSBpZiAocG9zID09IC0xKSB7XG5cdFx0XHRwb3MgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBwb3M7XG5cdH1cblxuXHQvLyBFbWl0IGV2ZW50XG5cdGVtaXRFdmVudCh0YWIsIHBhbmUpIHtcblx0XHRsZXQgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3RhYmJpcycsIHtcblx0XHRcdGJ1YmJsZXM6IHRydWUsXG5cdFx0XHRkZXRhaWw6IHtcblx0XHRcdFx0dGFiOiB0YWIsXG5cdFx0XHRcdHBhbmU6IHBhbmVcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRhYi5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0fVxuXG5cdC8vIFNldCBhY3RpdmVcblx0Z2V0QWN0aXZlSW5kZXgoZ3JvdXBUYWJzLCBncm91cEluZGV4KSB7XG5cdFx0Y29uc3QgbWVtb3J5ID0gdGhpcy5sb2FkTWVtb3J5KGdyb3VwSW5kZXgpO1xuXG5cdFx0aWYgKHR5cGVvZiBtZW1vcnkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gbWVtb3J5O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgZWxlbWVudCA9IGdyb3VwVGFicy5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy50YWJBY3RpdmUpO1xuXG5cdFx0XHRpZiAoIWVsZW1lbnQpIHtcblx0XHRcdFx0ZWxlbWVudCA9IGdyb3VwVGFicy5xdWVyeVNlbGVjdG9yKCdbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuaW5kZXgoZWxlbWVudCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy50YWJBY3RpdmVGYWxsYmFjayAhPT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy50YWJBY3RpdmVGYWxsYmFjaztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFUVFJJQlVURVNcblxuXHQvLyBBZGQgdGFiIGF0dHJpYnV0ZXNcblx0YWRkVGFiQXR0cmlidXRlcyh0YWIsIGdyb3VwSW5kZXgpIHtcblx0XHRjb25zdCB0YWJJbmRleCA9IHRoaXMuaW5kZXgodGFiKTtcblx0XHRjb25zdCBwcmVmaXggPSB0aGlzLm9wdGlvbnMucHJlZml4O1xuXG5cdFx0dGFiLnNldEF0dHJpYnV0ZSgncm9sZScsICd0YWInKTtcblx0XHR0YWIuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgYCR7cHJlZml4fXRhYnBhbmVsLSR7Z3JvdXBJbmRleH0tJHt0YWJJbmRleH1gKTtcblx0XHR0YWIuc2V0QXR0cmlidXRlKCdpZCcsIGAke3ByZWZpeH10YWItJHtncm91cEluZGV4fS0ke3RhYkluZGV4fWApO1xuXHR9XG5cblx0Ly8gQWRkIHRhYnBhbmVsIGF0dHJpYnV0ZXNcblx0YWRkUGFuZUF0dHJpYnV0ZXModGFiLCBwYW5lKSB7XG5cdFx0cGFuZS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFicGFuZWwnKTtcblx0XHRwYW5lLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgdGFiLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG5cdFx0cGFuZS5zZXRBdHRyaWJ1dGUoJ2lkJywgdGFiLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKTtcblx0XHRwYW5lLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuXHR9XG5cblx0Ly8gQWN0aXZhdGVcblx0YWN0aXZhdGUodGFiLCBpKSB7XG5cdFx0Y29uc3QgcGFuZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RhYi5nZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnKX1gKTtcblxuXHRcdHRoaXMucmVzZXRUYWJzKFsgLi4udGFiLnBhcmVudE5vZGUuY2hpbGRyZW4gXSk7XG5cdFx0dGhpcy5yZXNldFBhbmVzKFsgLi4ucGFuZS5wYXJlbnRFbGVtZW50LmNoaWxkcmVuIF0pO1xuXG5cdFx0dGhpcy5hY3RpdmF0ZVRhYih0YWIpO1xuXHRcdHRoaXMuYWN0aXZhdGVQYW5lKHBhbmUpO1xuXG5cdFx0dGhpcy5zYXZlTWVtb3J5KHRhYiwgaSk7XG5cblx0XHR0aGlzLmVtaXRFdmVudCh0YWIsIHBhbmUpO1xuXHR9XG5cblx0Ly8gQWN0aXZhdGUgdGFiXG5cdGFjdGl2YXRlVGFiKHRhYikge1xuXHRcdHRhYi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuXHRcdHRhYi5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcblx0fVxuXG5cdC8vIEFjdGl2YXRlIHBhbmVcblx0YWN0aXZhdGVQYW5lKHBhbmUpIHtcblx0XHRwYW5lLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZGVuJyk7XG5cdH1cblxuXHQvLyBSZW1vdmUgdGFiIGF0dHJpYnV0ZXNcblx0cmVzZXRUYWJzKHRhYnMpIHtcblx0XHR0YWJzLmZvckVhY2goKGVsKSA9PiBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKSk7XG5cdFx0dGhpcy5yZXNldFRhYmluZGV4KHRhYnMpO1xuXHR9XG5cblx0Ly8gUmVzZXQgcGFuZSBhdHRyaWJ1dGVzXG5cdHJlc2V0UGFuZXMocGFuZXMpIHtcblx0XHRwYW5lcy5mb3JFYWNoKChlbCkgPT4gZWwuc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJykpO1xuXHR9XG5cblx0Ly8gTUVNT1JZXG5cblx0Ly8gTG9hZCBtZW1vcnlcblx0bG9hZE1lbW9yeShncm91cEluZGV4KSB7XG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubWVtb3J5KSByZXR1cm47XG5cdFx0aWYgKHR5cGVvZiB0aGlzLm1lbW9yeVtncm91cEluZGV4XSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblx0XHRpZiAodGhpcy5tZW1vcnlbZ3JvdXBJbmRleF0gPT09IG51bGwpIHJldHVybjtcblxuXHRcdHJldHVybiBwYXJzZUludCh0aGlzLm1lbW9yeVtncm91cEluZGV4XSk7XG5cdH1cblxuXHQvLyBTYXZlIG1lbW9yeVxuXHRzYXZlTWVtb3J5KHRhYiwgZ3JvdXBJbmRleCkge1xuXHRcdGlmICghdGhpcy5vcHRpb25zLm1lbW9yeSkgcmV0dXJuO1xuXHRcdHRoaXMubWVtb3J5W2dyb3VwSW5kZXhdID0gdGhpcy5pbmRleCh0YWIpO1xuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMub3B0aW9ucy5tZW1vcnksIEpTT04uc3RyaW5naWZ5KHRoaXMubWVtb3J5KSk7XG5cdH1cblxuXHQvLyBUaGlzIG1lbW9yeVxuXHR0aGlzTWVtb3J5KCkge1xuXHRcdGlmICghdGhpcy5vcHRpb25zLm1lbW9yeSkgcmV0dXJuO1xuXHRcdGNvbnN0IHN0b3JlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5vcHRpb25zLm1lbW9yeSk7XG5cdFx0dGhpcy5tZW1vcnkgPSBzdG9yZSAhPT0gbnVsbCA/IEpTT04ucGFyc2Uoc3RvcmUpIDogW107XG5cdH1cblxuXHQvLyBPUFRJT05TXG5cblx0Ly8gRGVmYXVsdHNcblx0ZGVmYXVsdHMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSxcblx0XHRcdG1lbW9yeTogZmFsc2UsXG5cdFx0XHRwYW5lR3JvdXA6ICdbZGF0YS1wYW5lc10nLFxuXHRcdFx0cHJlZml4OiAnJyxcblx0XHRcdHRhYkFjdGl2ZTogJ1tkYXRhLWFjdGl2ZV0nLFxuXHRcdFx0dGFiQWN0aXZlRmFsbGJhY2s6IDAsXG5cdFx0XHR0YWJHcm91cDogJ1tkYXRhLXRhYnNdJyxcblx0XHRcdHRyaWdnZXI6ICdjbGljaydcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGhpcyBvcHRpb25zXG5cdHRoaXNPcHRpb25zKG9wdGlvbnMpIHtcblx0XHR0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuZGVmYXVsdHMoKSwgb3B0aW9ucyk7XG5cdFx0aWYgKHRoaXMub3B0aW9ucy5tZW1vcnkgIT09IHRydWUpIHJldHVybjtcblx0XHR0aGlzLm9wdGlvbnMubWVtb3J5ID0gJ3RhYmJpcyc7XG5cdH1cbn1cblxuLy8gRnVuY3Rpb24gY2FsbFxuZXhwb3J0IGZ1bmN0aW9uIHRhYmJpcyhvcHRpb25zID0ge30pIHtcblx0Y29uc3QgdGFicyA9IG5ldyB0YWJiaXNDbGFzcygpO1xuXHR0YWJzLmluaXQob3B0aW9ucyk7XG59IiwiLyoqXG4gKiBEb203IDQuMC40XG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwczovL2ZyYW1ld29yazcuaW8vZG9jcy9kb203Lmh0bWxcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMiwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogSmFudWFyeSAxMSwgMjAyMlxuICovXG5pbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5mdW5jdGlvbiBtYWtlUmVhY3RpdmUob2JqKSB7XG4gIGNvbnN0IHByb3RvID0gb2JqLl9fcHJvdG9fXztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcHJvdG9fXycsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvdG87XG4gICAgfSxcblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7XG4gICAgfVxuXG4gIH0pO1xufVxuXG5jbGFzcyBEb203IGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvcihpdGVtcykge1xuICAgIGlmICh0eXBlb2YgaXRlbXMgPT09ICdudW1iZXInKSB7XG4gICAgICBzdXBlcihpdGVtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyKC4uLihpdGVtcyB8fCBbXSkpO1xuICAgICAgbWFrZVJlYWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGFycmF5RmxhdChhcnIgPSBbXSkge1xuICBjb25zdCByZXMgPSBbXTtcbiAgYXJyLmZvckVhY2goZWwgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgcmVzLnB1c2goLi4uYXJyYXlGbGF0KGVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5wdXNoKGVsKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyLCBjYWxsYmFjaykge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFyciwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gYXJyYXlVbmlxdWUoYXJyKSB7XG4gIGNvbnN0IHVuaXF1ZUFycmF5ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHVuaXF1ZUFycmF5O1xufVxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tKC4pL2csIChtYXRjaCwgZ3JvdXApID0+IGdyb3VwLnRvVXBwZXJDYXNlKCkpO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuZnVuY3Rpb24gcXNhKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gIH1cblxuICBjb25zdCBhID0gW107XG4gIGNvbnN0IHJlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBhLnB1c2gocmVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBhcnIgPSBbXTtcblxuICBpZiAoIWNvbnRleHQgJiYgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgRG9tNyhhcnIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuXG4gICAgaWYgKGh0bWwuaW5kZXhPZignPCcpID49IDAgJiYgaHRtbC5pbmRleE9mKCc+JykgPj0gMCkge1xuICAgICAgbGV0IHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHRvQ3JlYXRlID0gJ3Rib2R5JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHRvQ3JlYXRlID0gJ3NlbGVjdCc7XG4gICAgICBjb25zdCB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVtcFBhcmVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyciA9IHFzYShzZWxlY3Rvci50cmltKCksIGNvbnRleHQgfHwgZG9jdW1lbnQpO1xuICAgIH0gLy8gYXJyID0gcXNhKHNlbGVjdG9yLCBkb2N1bWVudCk7XG5cbiAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIGFyci5wdXNoKHNlbGVjdG9yKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHJldHVybiBzZWxlY3RvcjtcbiAgICBhcnIgPSBzZWxlY3RvcjtcbiAgfVxuXG4gIHJldHVybiBuZXcgRG9tNyhhcnJheVVuaXF1ZShhcnIpKTtcbn1cblxuJC5mbiA9IERvbTcucHJvdG90eXBlO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuZnVuY3Rpb24gYWRkQ2xhc3MoLi4uY2xhc3Nlcykge1xuICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7XG4gIHRoaXMuZm9yRWFjaChlbCA9PiB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgdGhpcy5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKC4uLmNsYXNzZXMpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpO1xuICB0aGlzLmZvckVhY2goZWwgPT4ge1xuICAgIGNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoLi4uY2xhc3Nlcykge1xuICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7XG4gIHJldHVybiBhcnJheUZpbHRlcih0aGlzLCBlbCA9PiB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuZmlsdGVyKGNsYXNzTmFtZSA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkubGVuZ3RoID4gMDtcbiAgfSkubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBhdHRyXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgYXR0cnNcblxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdFxuICAgICAgZm9yIChjb25zdCBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHIoYXR0cikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcm9wKHByb3BzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IHByb3BcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF1bcHJvcHNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNldCBwcm9wc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV1bcHJvcHNdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV1bcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gIGxldCBlbDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkOyAvLyBHZXQgdmFsdWVcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGtleSBpbiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHtrZXl9YCk7XG5cbiAgICBpZiAoZGF0YUtleSkge1xuICAgICAgcmV0dXJuIGRhdGFLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgdmFsdWVcblxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVsID0gdGhpc1tpXTtcbiAgICBpZiAoIWVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fTtcbiAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEYXRhKGtleSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0pIHtcbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IG51bGw7XG4gICAgICBkZWxldGUgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGNvbnN0IGRhdGFzZXQgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmIChlbC5kYXRhc2V0KSB7XG4gICAgZm9yIChjb25zdCBkYXRhS2V5IGluIGVsLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGF0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBpZiAoYXR0ci5uYW1lLmluZGV4T2YoJ2RhdGEtJykgPj0gMCkge1xuICAgICAgICBkYXRhc2V0W3RvQ2FtZWxDYXNlKGF0dHIubmFtZS5zcGxpdCgnZGF0YS0nKVsxXSldID0gYXR0ci52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7ZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7ZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuXG4gIHJldHVybiBkYXRhc2V0O1xufVxuXG5mdW5jdGlvbiB2YWwodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBnZXQgdmFsdWVcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGlmIChlbC5tdWx0aXBsZSAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgY29uc3QgdmFsdWVzID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWwuc2VsZWN0ZWRPcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGVsLnNlbGVjdGVkT3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsLnZhbHVlO1xuICB9IC8vIHNldCB2YWx1ZVxuXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLm9wdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoZWwub3B0aW9uc1tqXS52YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudmFsKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJyA/IGAke2R1cmF0aW9ufW1zYCA6IGR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uKC4uLmFyZ3MpIHtcbiAgbGV0IFtldmVudFR5cGUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgY29uc3QgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7ZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IHBhcmVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgaWYgKCQocGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseShwYXJlbnRzW2tdLCBldmVudERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXSA6IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICBsZXQgajtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb2ZmKC4uLmFyZ3MpIHtcbiAgbGV0IFtldmVudFR5cGUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzW2pdO1xuICAgICAgbGV0IGhhbmRsZXJzO1xuXG4gICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICB9XG5cbiAgICAgIGlmIChoYW5kbGVycyAmJiBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgayA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgayAtPSAxKSB7XG4gICAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW2tdO1xuXG4gICAgICAgICAgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSAmJiBoYW5kbGVyLmxpc3RlbmVyLmRvbTdwcm94eSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uY2UoLi4uYXJncykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgW2V2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50TmFtZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmV2ZW50QXJncykge1xuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50QXJncyk7XG4gICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgICBpZiAob25jZUhhbmRsZXIuZG9tN3Byb3h5KSB7XG4gICAgICBkZWxldGUgb25jZUhhbmRsZXIuZG9tN3Byb3h5O1xuICAgIH1cbiAgfVxuXG4gIG9uY2VIYW5kbGVyLmRvbTdwcm94eSA9IGxpc3RlbmVyO1xuICByZXR1cm4gZG9tLm9uKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciguLi5hcmdzKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7XG4gIGNvbnN0IGV2ZW50RGF0YSA9IGFyZ3NbMV07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgY29uc3QgZWwgPSB0aGlzW2pdO1xuXG4gICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcigoZGF0YSwgZGF0YUluZGV4KSA9PiBkYXRhSW5kZXggPiAwKTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGRvbS5vZmYoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25FbmQoY2FsbGJhY2spIHtcbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB3aWR0aCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnd2lkdGgnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoZWlnaHQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCdoZWlnaHQnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICAgIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICAgIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNob3coKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAvLyBTdGlsbCBub3QgdmlzaWJsZVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHN0eWxlcygpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCk7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gY3NzKHByb3BzLCB2YWx1ZSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IGk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gLmNzcygnd2lkdGgnKVxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLmNzcyh7IHdpZHRoOiAnMTAwcHgnIH0pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIC5jc3MoJ3dpZHRoJywgJzEwMHB4JylcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wc10gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICB0aGlzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgIGNhbGxiYWNrLmFwcGx5KGVsLCBbZWwsIGluZGV4XSk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGFycmF5RmlsdGVyKHRoaXMsIGNhbGxiYWNrKTtcbiAgcmV0dXJuICQocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gaHRtbChodG1sKSB7XG4gIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogbnVsbDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0ZXh0KHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS50ZXh0Q29udGVudC50cmltKCkgOiBudWxsO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICBsZXQgY29tcGFyZVdpdGg7XG4gIGxldCBpO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlbC5tYXRjaGVzKSByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGNvbXBhcmVXaXRoID0gJChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZWwgPT09IGRvY3VtZW50O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gZWwgPT09IHdpbmRvdztcbiAgfVxuXG4gIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICBjb21wYXJlV2l0aCA9IHNlbGVjdG9yLm5vZGVUeXBlID8gW3NlbGVjdG9yXSA6IHNlbGVjdG9yO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGluZGV4KCkge1xuICBsZXQgY2hpbGQgPSB0aGlzWzBdO1xuICBsZXQgaTtcblxuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBlcShpbmRleCkge1xuICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHRoaXM7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgY29uc3QgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gJChbXSk7XG4gICAgcmV0dXJuICQoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cblxuICByZXR1cm4gJChbdGhpc1tpbmRleF1dKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKC4uLmVscykge1xuICBsZXQgbmV3Q2hpbGQ7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICBmb3IgKGxldCBrID0gMDsgayA8IGVscy5sZW5ndGg7IGsgKz0gMSkge1xuICAgIG5ld0NoaWxkID0gZWxzW2tdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGk7XG4gIGxldCBqO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZSh0ZW1wRGl2LmNoaWxkTm9kZXNbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLnByZXBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgY29uc3QgYmVmb3JlID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgIH0gZWxzZSBpZiAoYmVmb3JlLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoc2VsZWN0b3IpIHtcbiAgY29uc3QgYWZ0ZXIgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYWZ0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZnRlclswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBhZnRlclswXS5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFmdGVyLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFmdGVyW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBhZnRlcltqXS5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgbGV0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKG5leHQpLmlzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG5cbiAgICBlbCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gJChuZXh0RWxzKTtcbn1cblxuZnVuY3Rpb24gcHJldihzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzWzBdO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgbGV0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQocHJldikuaXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcblxuICAgIGVsID0gcHJldjtcbiAgfVxuXG4gIHJldHVybiAkKHByZXZFbHMpO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5uZXh0QWxsKHNlbGVjdG9yKS5hZGQodGhpcy5wcmV2QWxsKHNlbGVjdG9yKSk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudHMoc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHBhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICBsZXQgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICBjbG9zZXN0ID0gY2xvc2VzdC5wYXJlbnRzKHNlbGVjdG9yKS5lcSgwKTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0O1xufVxuXG5mdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGZvdW5kRWxlbWVudHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBmb3VuZEVsZW1lbnRzLnB1c2goZm91bmRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGZvdW5kRWxlbWVudHMpO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICBjb25zdCBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXNbaV0uY2hpbGRyZW47XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICghc2VsZWN0b3IgfHwgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG59XG5cbmZ1bmN0aW9uIGFkZCguLi5lbHMpIHtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IGk7XG4gIGxldCBqO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB0b0FkZCA9ICQoZWxzW2ldKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZG9tLnB1c2godG9BZGRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb207XG59XG5cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAoZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgZWwuY2hpbGROb2Rlc1tqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsLmNoaWxkTm9kZXNbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsLnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBzY3JvbGxUbyguLi5hcmdzKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZWFzaW5nO1xuICAgIFtsZWZ0LCB0b3AsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cblxuICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIGVhc2luZyA9ICdzd2luZyc7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICBjb25zdCBlbCA9IHRoaXM7XG4gICAgbGV0IGN1cnJlbnRUb3A7XG4gICAgbGV0IGN1cnJlbnRMZWZ0O1xuICAgIGxldCBtYXhUb3A7XG4gICAgbGV0IG1heExlZnQ7XG4gICAgbGV0IG5ld1RvcDtcbiAgICBsZXQgbmV3TGVmdDtcbiAgICBsZXQgc2Nyb2xsVG9wOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBsZXQgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgbGV0IGFuaW1hdGVUb3AgPSB0b3AgPiAwIHx8IHRvcCA9PT0gMDtcbiAgICBsZXQgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuXG4gICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlYXNpbmcgPSAnc3dpbmcnO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIGN1cnJlbnRMZWZ0ID0gZWwuc2Nyb2xsTGVmdDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWR1cmF0aW9uKSByZXR1cm47XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgbWF4VG9wID0gZWwuc2Nyb2xsSGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3VG9wID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCBtYXhUb3ApLCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG5cbiAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPT09IGN1cnJlbnRUb3ApIGFuaW1hdGVUb3AgPSBmYWxzZTtcbiAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiByZW5kZXIodGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XG4gICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgbGV0IGRvbmU7XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgc2Nyb2xsVG9wID0gY3VycmVudFRvcCArIGVhc2VQcm9ncmVzcyAqIChuZXdUb3AgLSBjdXJyZW50VG9wKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCk7XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPCBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA8PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPiBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0ID49IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBlbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufSAvLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuXG5cbmZ1bmN0aW9uIHNjcm9sbFRvcCguLi5hcmdzKSB7XG4gIGxldCBbdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW3RvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuXG4gIGNvbnN0IGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8odW5kZWZpbmVkLCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGVmdCguLi5hcmdzKSB7XG4gIGxldCBbbGVmdCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2tdID0gYXJncztcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtsZWZ0LCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG5cbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZG9tLnNjcm9sbFRvKGxlZnQsIHVuZGVmaW5lZCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuZnVuY3Rpb24gYW5pbWF0ZShpbml0aWFsUHJvcHMsIGluaXRpYWxQYXJhbXMpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG4gIGNvbnN0IGEgPSB7XG4gICAgcHJvcHM6IE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxQcm9wcyksXG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHtcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICBlYXNpbmc6ICdzd2luZycgLy8gb3IgJ2xpbmVhcidcblxuICAgICAgLyogQ2FsbGJhY2tzXG4gICAgICBiZWdpbihlbGVtZW50cylcbiAgICAgIGNvbXBsZXRlKGVsZW1lbnRzKVxuICAgICAgcHJvZ3Jlc3MoZWxlbWVudHMsIGNvbXBsZXRlLCByZW1haW5pbmcsIHN0YXJ0LCB0d2VlblZhbHVlKVxuICAgICAgKi9cblxuICAgIH0sIGluaXRpYWxQYXJhbXMpLFxuICAgIGVsZW1lbnRzOiBlbHMsXG4gICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICBxdWU6IFtdLFxuXG4gICAgZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcblxuICAgIHN0b3AoKSB7XG4gICAgICBpZiAoYS5mcmFtZUlkKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhLmZyYW1lSWQpO1xuICAgICAgfVxuXG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKGVsID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBhLnF1ZSA9IFtdO1xuICAgIH0sXG5cbiAgICBkb25lKGNvbXBsZXRlKSB7XG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKGVsID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29tcGxldGUpIGNvbXBsZXRlKGVscyk7XG5cbiAgICAgIGlmIChhLnF1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFuaW1hdGUocHJvcHMsIHBhcmFtcykge1xuICAgICAgaWYgKGEuYW5pbWF0aW5nKSB7XG4gICAgICAgIGEucXVlLnB1c2goW3Byb3BzLCBwYXJhbXNdKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107IC8vIERlZmluZSAmIENhY2hlIEluaXRpYWxzICYgVW5pdHNcblxuICAgICAgYS5lbGVtZW50cy5lYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGluaXRpYWxGdWxsVmFsdWU7XG4gICAgICAgIGxldCBpbml0aWFsVmFsdWU7XG4gICAgICAgIGxldCB1bml0O1xuICAgICAgICBsZXQgZmluYWxWYWx1ZTtcbiAgICAgICAgbGV0IGZpbmFsRnVsbFZhbHVlO1xuICAgICAgICBpZiAoIWVsLmRvbTdBbmltYXRlSW5zdGFuY2UpIGEuZWxlbWVudHNbaW5kZXhdLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICAgICAgICBlbGVtZW50c1tpbmRleF0gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiBlbFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCkucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgICAgICAgaW5pdGlhbFZhbHVlID0gcGFyc2VGbG9hdChpbml0aWFsRnVsbFZhbHVlKTtcbiAgICAgICAgICB1bml0ID0gaW5pdGlhbEZ1bGxWYWx1ZS5yZXBsYWNlKGluaXRpYWxWYWx1ZSwgJycpO1xuICAgICAgICAgIGZpbmFsVmFsdWUgPSBwYXJzZUZsb2F0KHByb3BzW3Byb3BdKTtcbiAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZSA9IHByb3BzW3Byb3BdICsgdW5pdDtcbiAgICAgICAgICBlbGVtZW50c1tpbmRleF1bcHJvcF0gPSB7XG4gICAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgdW5pdCxcbiAgICAgICAgICAgIGZpbmFsVmFsdWUsXG4gICAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgICAgbGV0IHRpbWU7XG4gICAgICBsZXQgZWxlbWVudHNEb25lID0gMDtcbiAgICAgIGxldCBwcm9wc0RvbmUgPSAwO1xuICAgICAgbGV0IGRvbmU7XG4gICAgICBsZXQgYmVnYW4gPSBmYWxzZTtcbiAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGxldCBwcm9ncmVzcztcbiAgICAgICAgbGV0IGVhc2VQcm9ncmVzczsgLy8gbGV0IGVsO1xuXG4gICAgICAgIGlmICghYmVnYW4pIHtcbiAgICAgICAgICBiZWdhbiA9IHRydWU7XG4gICAgICAgICAgaWYgKHBhcmFtcy5iZWdpbikgcGFyYW1zLmJlZ2luKGVscyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBwYXJhbXMucHJvZ3Jlc3MoZWxzLCBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKSwgc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSA8IDAgPyAwIDogc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSwgc3RhcnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xuICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICAgICAgICBlYXNlUHJvZ3Jlc3MgPSBhLmVhc2luZ1Byb2dyZXNzKHBhcmFtcy5lYXNpbmcsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgICBmaW5hbFZhbHVlLFxuICAgICAgICAgICAgICB1bml0XG4gICAgICAgICAgICB9ID0gZWxbcHJvcF07XG4gICAgICAgICAgICBlbFtwcm9wXS5jdXJyZW50VmFsdWUgPSBpbml0aWFsVmFsdWUgKyBlYXNlUHJvZ3Jlc3MgKiAoZmluYWxWYWx1ZSAtIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaW5hbFZhbHVlID4gaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA+PSBmaW5hbFZhbHVlIHx8IGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gZmluYWxWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgICAgIHByb3BzRG9uZSArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGEuZG9uZShwYXJhbXMuY29tcGxldGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOyAvLyBUaGVuIGNhbGxcblxuICAgICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG5cbiAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICB9O1xuXG4gIGlmIChhLmVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlbHM7XG4gIH1cblxuICBsZXQgYW5pbWF0ZUluc3RhbmNlO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGFuaW1hdGVJbnN0YW5jZSA9IGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICB9IGVsc2UgYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmICghYW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJvcHMgPT09ICdzdG9wJykge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLmFuaW1hdGUoYS5wcm9wcywgYS5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIGVscztcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgY29uc3QgZWxzID0gdGhpcztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBub1RyaWdnZXIgPSAncmVzaXplIHNjcm9sbCcuc3BsaXQoJyAnKTtcblxuZnVuY3Rpb24gc2hvcnRjdXQobmFtZSkge1xuICBmdW5jdGlvbiBldmVudEhhbmRsZXIoLi4uYXJncykge1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO2Vsc2Uge1xuICAgICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbmNvbnN0IGNsaWNrID0gc2hvcnRjdXQoJ2NsaWNrJyk7XG5jb25zdCBibHVyID0gc2hvcnRjdXQoJ2JsdXInKTtcbmNvbnN0IGZvY3VzID0gc2hvcnRjdXQoJ2ZvY3VzJyk7XG5jb25zdCBmb2N1c2luID0gc2hvcnRjdXQoJ2ZvY3VzaW4nKTtcbmNvbnN0IGZvY3Vzb3V0ID0gc2hvcnRjdXQoJ2ZvY3Vzb3V0Jyk7XG5jb25zdCBrZXl1cCA9IHNob3J0Y3V0KCdrZXl1cCcpO1xuY29uc3Qga2V5ZG93biA9IHNob3J0Y3V0KCdrZXlkb3duJyk7XG5jb25zdCBrZXlwcmVzcyA9IHNob3J0Y3V0KCdrZXlwcmVzcycpO1xuY29uc3Qgc3VibWl0ID0gc2hvcnRjdXQoJ3N1Ym1pdCcpO1xuY29uc3QgY2hhbmdlID0gc2hvcnRjdXQoJ2NoYW5nZScpO1xuY29uc3QgbW91c2Vkb3duID0gc2hvcnRjdXQoJ21vdXNlZG93bicpO1xuY29uc3QgbW91c2Vtb3ZlID0gc2hvcnRjdXQoJ21vdXNlbW92ZScpO1xuY29uc3QgbW91c2V1cCA9IHNob3J0Y3V0KCdtb3VzZXVwJyk7XG5jb25zdCBtb3VzZWVudGVyID0gc2hvcnRjdXQoJ21vdXNlZW50ZXInKTtcbmNvbnN0IG1vdXNlbGVhdmUgPSBzaG9ydGN1dCgnbW91c2VsZWF2ZScpO1xuY29uc3QgbW91c2VvdXQgPSBzaG9ydGN1dCgnbW91c2VvdXQnKTtcbmNvbnN0IG1vdXNlb3ZlciA9IHNob3J0Y3V0KCdtb3VzZW92ZXInKTtcbmNvbnN0IHRvdWNoc3RhcnQgPSBzaG9ydGN1dCgndG91Y2hzdGFydCcpO1xuY29uc3QgdG91Y2hlbmQgPSBzaG9ydGN1dCgndG91Y2hlbmQnKTtcbmNvbnN0IHRvdWNobW92ZSA9IHNob3J0Y3V0KCd0b3VjaG1vdmUnKTtcbmNvbnN0IHJlc2l6ZSA9IHNob3J0Y3V0KCdyZXNpemUnKTtcbmNvbnN0IHNjcm9sbCA9IHNob3J0Y3V0KCdzY3JvbGwnKTtcblxuZXhwb3J0IGRlZmF1bHQgJDtcbmV4cG9ydCB7ICQsIGFkZCwgYWRkQ2xhc3MsIGFuaW1hdGUsIGFuaW1hdGlvbkVuZCwgYXBwZW5kLCBhcHBlbmRUbywgYXR0ciwgYmx1ciwgY2hhbmdlLCBjaGlsZHJlbiwgY2xpY2ssIGNsb3Nlc3QsIGNzcywgZGF0YSwgZGF0YXNldCwgZGV0YWNoLCBlYWNoLCBlbXB0eSwgZXEsIGZpbHRlciwgZmluZCwgZm9jdXMsIGZvY3VzaW4sIGZvY3Vzb3V0LCBoYXNDbGFzcywgaGVpZ2h0LCBoaWRlLCBodG1sLCBpbmRleCwgaW5zZXJ0QWZ0ZXIsIGluc2VydEJlZm9yZSwgaXMsIGtleWRvd24sIGtleXByZXNzLCBrZXl1cCwgbW91c2Vkb3duLCBtb3VzZWVudGVyLCBtb3VzZWxlYXZlLCBtb3VzZW1vdmUsIG1vdXNlb3V0LCBtb3VzZW92ZXIsIG1vdXNldXAsIG5leHQsIG5leHRBbGwsIG9mZiwgb2Zmc2V0LCBvbiwgb25jZSwgb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGgsIHBhcmVudCwgcGFyZW50cywgcHJlcGVuZCwgcHJlcGVuZFRvLCBwcmV2LCBwcmV2QWxsLCBwcm9wLCByZW1vdmUsIHJlbW92ZUF0dHIsIHJlbW92ZUNsYXNzLCByZW1vdmVEYXRhLCByZXNpemUsIHNjcm9sbCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG8sIHNjcm9sbFRvcCwgc2hvdywgc2libGluZ3MsIHN0b3AsIHN0eWxlcywgc3VibWl0LCB0ZXh0LCB0b2dnbGVDbGFzcywgdG91Y2hlbmQsIHRvdWNobW92ZSwgdG91Y2hzdGFydCwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCB0cmlnZ2VyLCB2YWwsIHZhbHVlLCB3aWR0aCB9O1xuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiAob2JqICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmXG4gICAgICAgIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQgPSB7fSwgc3JjID0ge30pIHtcbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gICAgYm9keToge30sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cigpIHsgfSxcbiAgICAgICAgbm9kZU5hbWU6ICcnLFxuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudCgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZSgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGltcG9ydE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICAgIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgICByZXR1cm4gZG9jO1xufVxuXG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlKCkgeyB9LFxuICAgICAgICBwdXNoU3RhdGUoKSB7IH0sXG4gICAgICAgIGdvKCkgeyB9LFxuICAgICAgICBiYWNrKCkgeyB9LFxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXIoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2UoKSB7IH0sXG4gICAgRGF0ZSgpIHsgfSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQoKSB7IH0sXG4gICAgY2xlYXJUaW1lb3V0KCkgeyB9LFxuICAgIG1hdGNoTWVkaWEoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGV4dGVuZCwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgc3NyRG9jdW1lbnQsIHNzcldpbmRvdyB9O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlID0gJ3dpbmRvdycsIGNvbnRhaW5lckVsKSB7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKHBvaW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcG9pbnRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG5cbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59IiwiaW1wb3J0IHNldEJyZWFrcG9pbnQgZnJvbSAnLi9zZXRCcmVha3BvaW50LmpzJztcbmltcG9ydCBnZXRCcmVha3BvaW50IGZyb20gJy4vZ2V0QnJlYWtwb2ludC5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnRcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbG9vcGVkU2xpZGVzID0gMCxcbiAgICBwYXJhbXMsXG4gICAgJGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcblxuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG5cbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgJGVsLmFkZENsYXNzKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcblxuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuXG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuXG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuXG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn0iLCJmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgaXNMb2NrZWQ6IHdhc0xvY2tlZCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIHNsaWRlc09mZnNldEJlZm9yZVxuICB9ID0gcGFyYW1zO1xuXG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIH1cblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cblxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja092ZXJmbG93XG59OyIsImZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBjbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0Q2xhc3Nlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsXG4gICAgcGFyYW1zLFxuICAgIHJ0bCxcbiAgICAkZWwsXG4gICAgZGV2aWNlLFxuICAgIHN1cHBvcnRcbiAgfSA9IHN3aXBlcjsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdwb2ludGVyLWV2ZW50cyc6ICFzdXBwb3J0LnRvdWNoXG4gIH0sIHtcbiAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICB9LCB7XG4gICAgJ2F1dG9oZWlnaHQnOiBwYXJhbXMuYXV0b0hlaWdodFxuICB9LCB7XG4gICAgJ3J0bCc6IHJ0bFxuICB9LCB7XG4gICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICB9LCB7XG4gICAgJ2dyaWQtY29sdW1uJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbidcbiAgfSwge1xuICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWRcbiAgfSwge1xuICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gIH0sIHtcbiAgICAnY3NzLW1vZGUnOiBwYXJhbXMuY3NzTW9kZVxuICB9LCB7XG4gICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gICRlbC5hZGRDbGFzcyhbLi4uY2xhc3NOYW1lc10uam9pbignICcpKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59IiwiaW1wb3J0IGFkZENsYXNzZXMgZnJvbSAnLi9hZGRDbGFzc2VzLmpzJztcbmltcG9ydCByZW1vdmVDbGFzc2VzIGZyb20gJy4vcmVtb3ZlQ2xhc3Nlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgICRlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsIi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uL3NoYXJlZC9kb20uanMnO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuLi9zaGFyZWQvZ2V0LXN1cHBvcnQuanMnO1xuaW1wb3J0IHsgZ2V0RGV2aWNlIH0gZnJvbSAnLi4vc2hhcmVkL2dldC1kZXZpY2UuanMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uL3NoYXJlZC9nZXQtYnJvd3Nlci5qcyc7XG5pbXBvcnQgUmVzaXplIGZyb20gJy4vbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMnO1xuaW1wb3J0IGV2ZW50c0VtaXR0ZXIgZnJvbSAnLi9ldmVudHMtZW1pdHRlci5qcyc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vdXBkYXRlL2luZGV4LmpzJztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnLi90cmFuc2l0aW9uL2luZGV4LmpzJztcbmltcG9ydCBzbGlkZSBmcm9tICcuL3NsaWRlL2luZGV4LmpzJztcbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcC9pbmRleC5qcyc7XG5pbXBvcnQgZ3JhYkN1cnNvciBmcm9tICcuL2dyYWItY3Vyc29yL2luZGV4LmpzJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9ldmVudHMvaW5kZXguanMnO1xuaW1wb3J0IGJyZWFrcG9pbnRzIGZyb20gJy4vYnJlYWtwb2ludHMvaW5kZXguanMnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9jbGFzc2VzL2luZGV4LmpzJztcbmltcG9ydCBpbWFnZXMgZnJvbSAnLi9pbWFnZXMvaW5kZXguanMnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgbW9kdWxlRXh0ZW5kUGFyYW1zIGZyb20gJy4vbW9kdWxlRXh0ZW5kUGFyYW1zLmpzJztcbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3NlcyxcbiAgaW1hZ2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIGlmIChwYXJhbXMuZWwgJiYgJChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgICQocGFyYW1zLmVsKS5lYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9IC8vIFN3aXBlciBJbnN0YW5jZVxuXG5cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcblxuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsTW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIHN3aXBlci5tb2R1bGVzLmZvckVhY2gobW9kID0+IHtcbiAgICAgIG1vZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcblxuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG5cbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpOyAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uQW55KSB7XG4gICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgfSAvLyBTYXZlIERvbSBsaWJcblxuXG4gICAgc3dpcGVyLiQgPSAkOyAvLyBFeHRlbmQgU3dpcGVyXG5cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiAkKCksXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG5cbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcblxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcblxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddO1xuICAgICAgICBjb25zdCBkZXNrdG9wID0gWydwb2ludGVyZG93bicsICdwb2ludGVybW92ZScsICdwb2ludGVydXAnXTtcbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdFxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9IC8vIFJldHVybiBhcHAgaW5zdGFuY2VcblxuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cblxuICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxKTtcbiAgICBjb25zdCBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgY29uc3QgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAobWF4IC0gbWluKSAqIHByb2dyZXNzICsgbWluO1xuICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG5cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cblxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cblxuICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3ID0gJ2N1cnJlbnQnLCBleGFjdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgIGxldCBicmVha0xvb3A7XG5cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG5cbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcHY7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyOyAvLyBCcmVha3BvaW50c1xuXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIGxldCB0cmFuc2xhdGVkO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuXG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG5cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCkuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgbW91bnQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7IC8vIEZpbmQgZWxcblxuICAgIGNvbnN0ICRlbCA9ICQoZWwgfHwgc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuXG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9ICQoZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKSk7IC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG5cbiAgICAgICAgcmVzLmNoaWxkcmVuID0gb3B0aW9ucyA9PiAkZWwuY2hpbGRyZW4ob3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRlbC5jaGlsZHJlbihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgfTsgLy8gRmluZCBXcmFwcGVyXG5cblxuICAgIGxldCAkd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuXG4gICAgaWYgKCR3cmFwcGVyRWwubGVuZ3RoID09PSAwICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICR3cmFwcGVyRWwgPSAkKHdyYXBwZXIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcztcbiAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAkZWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5lYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbCxcbiAgICAgICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7IC8vIFNldCBicmVha3BvaW50XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9IC8vIEFkZCBDbGFzc2VzXG5cblxuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7IC8vIENyZWF0ZSBsb29wXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH0gLy8gVXBkYXRlIHNpemVcblxuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsgLy8gVXBkYXRlIHNsaWRlc1xuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9IC8vIFNldCBHcmFiIEN1cnNvclxuXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgfSAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG5cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSAvLyBBdHRhY2ggZXZlbnRzXG5cblxuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTsgLy8gSW5pdCBGbGFnXG5cbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlOyAvLyBFbWl0XG5cbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSA9IHRydWUsIGNsZWFuU3R5bGVzID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgJGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7IC8vIEluaXQgRmxhZ1xuXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7IC8vIERldGFjaCBldmVudHNcblxuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wXG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH0gLy8gQ2xlYW51cCBzdHlsZXNcblxuXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoW3BhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzXS5qb2luKCcgJykpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpOyAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcblxuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcblxuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuXG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG5cbn1cblxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjsiLCJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgbG9vcEZpbGxHcm91cFdpdGhCbGFuazogZmFsc2UsXG4gIGxvb3BQcmV2ZW50c1NsaWRlOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1pbnZpc2libGUtYmxhbmsnLFxuICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZScsXG4gIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicsXG4gIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbiAgLy8gSW50ZXJuYWxzXG4gIF9lbWl0Q2xhc3NlczogZmFsc2Vcbn07IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuXG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoLi4uYXJncykge1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG5cbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcblxuICBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG5cbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgb2ZmQW55KGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgZW1pdCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuXG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50LCAuLi5kYXRhXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG59OyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0LmpzJztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlLmpzJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZC5qcyc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZS5qcyc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2suanMnO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwuanMnO1xubGV0IGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG5jb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoRXZlbnRzLFxuICAgIGVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBkZXZpY2UsXG4gICAgc3VwcG9ydFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoKSB7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50W2RvbU1ldGhvZF0odG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlXG4gICAgfSA6IGNhcHR1cmUpO1xuICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgIGVsW2RvbU1ldGhvZF0odG91Y2hFdmVudHMuY2FuY2VsLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH0gLy8gUHJldmVudCBMaW5rcyBDbGlja3NcblxuXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfSAvLyBSZXNpemUgaGFuZGxlclxuXG5cbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzdXBwb3J0XG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICBpZiAoc3VwcG9ydC50b3VjaCAmJiAhZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuXG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47IC8vIEJyZWFrcG9pbnRzXG5cbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH0gLy8gU2F2ZSBsb2Nrc1xuXG5cbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7IC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gIH0gLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuXG5cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gLTApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuXG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufSIsImltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cblxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cblxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH0gLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG5cblxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfSAvLyBUaW1lIGRpZmZcblxuXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7IC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGNvbnN0IHBhdGhUcmVlID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShwYXRoVHJlZSAmJiBwYXRoVHJlZVswXSB8fCBlLnRhcmdldCk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuXG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICBsZXQgY3VycmVudFBvcztcblxuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3NcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlXG5cblxuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcblxuXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG5cbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHJldHVybjtcbiAgY29uc3QgdGFyZ2V0VG91Y2ggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGUudGFyZ2V0VG91Y2hlcyAmJiAoZS50YXJnZXRUb3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF0pO1xuICBjb25zdCBwYWdlWCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWCA6IGUucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IHRhcmdldFRvdWNoLnBhZ2VZIDogZS5wYWdlWTtcblxuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cblxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHRvdWNoQW5nbGU7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICB9XG5cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuXG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyaWdnZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCcpO1xuICAgIH1cblxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlOyAvLyBHcmFiIEN1cnNvclxuXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuICBkaWZmICo9IHBhcmFtcy50b3VjaFJhdGlvO1xuICBpZiAocnRsKSBkaWZmID0gLWRpZmY7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcblxuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG5cbiAgaWYgKGRpZmYgPiAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgMSAtIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBkYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICB9XG5cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfSAvLyBEaXJlY3Rpb25zIGxvY2tzXG5cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH0gLy8gVGhyZXNob2xkXG5cblxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOyAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7IC8vIFVwZGF0ZSB0cmFuc2xhdGVcblxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnOyAvLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcblxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UgPSB0aGlzKSB7XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG5cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cblxuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBsZXQgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hzdGFydCc7XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47IC8vIGNoYW5nZSB0YXJnZXQgZWwgZm9yIHNoYWRvdyByb290IGNvbXBvbmVudFxuXG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcblxuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudC5wYXRoICYmIGV2ZW50LnBhdGhbMF0pIHtcbiAgICAkdGFyZ2V0RWwgPSAkKGV2ZW50LnBhdGhbMF0pO1xuICB9XG5cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7IC8vIHVzZSBjbG9zZXN0RWxlbWVudCBmb3Igc2hhZG93IHJvb3QgZWxlbWVudCB0byBnZXQgdGhlIGFjdHVhbCBjbG9zZXN0IGZvciBuZXN0ZWQgc2hhZG93IHJvb3QgZWxlbWVudFxuXG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCBlLnRhcmdldCkgOiAkdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcilbMF0pKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTsgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG5cbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcblxuICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIGlmICgkdGFyZ2V0RWwuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09ICR0YXJnZXRFbFswXSkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcblxuICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn0iLCJpbXBvcnQgc2V0R3JhYkN1cnNvciBmcm9tICcuL3NldEdyYWJDdXJzb3IuanMnO1xuaW1wb3J0IHVuc2V0R3JhYkN1cnNvciBmcm9tICcuL3Vuc2V0R3JhYkN1cnNvci5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEdyYWJDdXJzb3IsXG4gIHVuc2V0R3JhYkN1cnNvclxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yKG1vdmluZykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBjb25zdCBlbCA9IHN3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gc3dpcGVyLmVsIDogc3dpcGVyLndyYXBwZXJFbDtcbiAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnLXdlYmtpdC1ncmFiYmluZycgOiAnLXdlYmtpdC1ncmFiJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy1tb3otZ3JhYmJpbicgOiAnLW1vei1ncmFiJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHN3aXBlci5zdXBwb3J0LnRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbn0iLCJpbXBvcnQgbG9hZEltYWdlIGZyb20gJy4vbG9hZEltYWdlLmpzJztcbmltcG9ydCBwcmVsb2FkSW1hZ2VzIGZyb20gJy4vcHJlbG9hZEltYWdlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvYWRJbWFnZSxcbiAgcHJlbG9hZEltYWdlc1xufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3NoYXJlZC9kb20uanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBpbWFnZTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IGlzUGljdHVyZSA9ICQoaW1hZ2VFbCkucGFyZW50KCdwaWN0dXJlJylbMF07XG5cbiAgaWYgKCFpc1BpY3R1cmUgJiYgKCFpbWFnZUVsLmNvbXBsZXRlIHx8ICFjaGVja0ZvckNvbXBsZXRlKSkge1xuICAgIGlmIChzcmMpIHtcbiAgICAgIGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuICAgICAgaW1hZ2Uub25sb2FkID0gb25SZWFkeTtcbiAgICAgIGltYWdlLm9uZXJyb3IgPSBvblJlYWR5O1xuXG4gICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgaW1hZ2Uuc2l6ZXMgPSBzaXplcztcbiAgICAgIH1cblxuICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgaW1hZ2Uuc3JjID0gc3JjO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvblJlYWR5KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGltYWdlIGFscmVhZHkgbG9hZGVkLi4uXG4gICAgb25SZWFkeSgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlbG9hZEltYWdlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG5cbiAgZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTtcblxuICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkID09PSBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2ltYWdlc1JlYWR5Jyk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShpbWFnZUVsLCBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLCBpbWFnZUVsLnNyY3NldCB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JyksIGltYWdlRWwuc2l6ZXMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NpemVzJyksIHRydWUsIG9uUmVhZHkpO1xuICB9XG59IiwiaW1wb3J0IGxvb3BDcmVhdGUgZnJvbSAnLi9sb29wQ3JlYXRlLmpzJztcbmltcG9ydCBsb29wRml4IGZyb20gJy4vbG9vcEZpeC5qcyc7XG5pbXBvcnQgbG9vcERlc3Ryb3kgZnJvbSAnLi9sb29wRGVzdHJveS5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvb3BDcmVhdGUsXG4gIGxvb3BGaXgsXG4gIGxvb3BEZXN0cm95XG59OyIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi9zaGFyZWQvZG9tLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BDcmVhdGUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICAkd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuXG4gIGNvbnN0ICRzZWxlY3RvciA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKS5sZW5ndGggPiAwID8gJCgkd3JhcHBlckVsLmNoaWxkcmVuKClbMF0ucGFyZW50Tm9kZSkgOiAkd3JhcHBlckVsO1xuICAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfWApLnJlbW92ZSgpO1xuICBsZXQgc2xpZGVzID0gJHNlbGVjdG9yLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICBjb25zdCBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgICBpZiAoYmxhbmtTbGlkZXNOdW0gIT09IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGJsYW5rTm9kZSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFkZENsYXNzKGAke3BhcmFtcy5zbGlkZUNsYXNzfSAke3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3N9YCk7XG4gICAgICAgICRzZWxlY3Rvci5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgIH1cblxuICAgICAgc2xpZGVzID0gJHNlbGVjdG9yLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiAhcGFyYW1zLmxvb3BlZFNsaWRlcykgcGFyYW1zLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcblxuICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGgpIHtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgfVxuXG4gIGNvbnN0IHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzID0gW107XG4gIHNsaWRlcy5lYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBzbGlkZSA9ICQoZWwpO1xuXG4gICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgYXBwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXBwZW5kU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgJHNlbGVjdG9yLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICRzZWxlY3Rvci5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgICR3cmFwcGVyRWwsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc1xuICB9ID0gc3dpcGVyO1xuICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30sLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHNsaWRlcyxcbiAgICBsb29wZWRTbGlkZXMsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgc25hcEdyaWQsXG4gICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBjb25zdCBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTtcbiAgY29uc3QgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7IC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcblxuICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBuZXdJbmRleCA9IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAzICsgYWN0aXZlSW5kZXg7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIGNvbnN0IHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykge1xuICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgIGNvbnN0IHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGV4dGVuZFBhcmFtcyhvYmogPSB7fSkge1xuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG5cbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICBhdXRvOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9ic2VydmVyKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBjb25zdCBhdHRhY2ggPSAodGFyZ2V0LCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH07XG5cbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICB9XG4gICAgfSAvLyBPYnNlcnZlIGNvbnRhaW5lclxuXG5cbiAgICBhdHRhY2goc3dpcGVyLiRlbFswXSwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7IC8vIE9ic2VydmUgd3JhcHBlclxuXG4gICAgYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIG9ic2VydmVycy5zcGxpY2UoMCwgb2JzZXJ2ZXJzLmxlbmd0aCk7XG4gIH07XG5cbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlc2l6ZSh7XG4gIHN3aXBlcixcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBvYnNlcnZlciA9IG51bGw7XG5cbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgIGVudHJpZXMuZm9yRWFjaCgoe1xuICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgIHRhcmdldFxuICAgICAgfSkgPT4ge1xuICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcblxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHJlbW92ZU9ic2VydmVyKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufSIsImltcG9ydCBzbGlkZVRvIGZyb20gJy4vc2xpZGVUby5qcyc7XG5pbXBvcnQgc2xpZGVUb0xvb3AgZnJvbSAnLi9zbGlkZVRvTG9vcC5qcyc7XG5pbXBvcnQgc2xpZGVOZXh0IGZyb20gJy4vc2xpZGVOZXh0LmpzJztcbmltcG9ydCBzbGlkZVByZXYgZnJvbSAnLi9zbGlkZVByZXYuanMnO1xuaW1wb3J0IHNsaWRlUmVzZXQgZnJvbSAnLi9zbGlkZVJlc2V0LmpzJztcbmltcG9ydCBzbGlkZVRvQ2xvc2VzdCBmcm9tICcuL3NsaWRlVG9DbG9zZXN0LmpzJztcbmltcG9ydCBzbGlkZVRvQ2xpY2tlZFNsaWRlIGZyb20gJy4vc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGFuaW1hdGluZyxcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgIHBlckdyb3VwID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdjdXJyZW50JywgdHJ1ZSksIDEpO1xuICB9XG5cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuXG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmcsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuXG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHtcbiAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICBwcmV2U25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG5cbiAgbGV0IHByZXZJbmRleCA9IDA7XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsImltcG9ydCB7IGFuaW1hdGVDU1NNb2RlU2Nyb2xsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG8oaW5kZXggPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5kZXggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFske3R5cGVvZiBpbmRleH1dIGdpdmVuLmApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYGluZGV4YCBhcmd1bWVudCBjb252ZXJ0ZWQgZnJvbSBgc3RyaW5nYCB0byBgbnVtYmVyYC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNvbnN0IGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgXG4gICAgICogYWZ0ZXIgYmVpbmcgY29udmVydGVkIGZyb20gdGhlIGBzdHJpbmdgIHR5cGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgICBjb25zdCBpc1ZhbGlkTnVtYmVyID0gaXNGaW5pdGUoaW5kZXhBc051bWJlcik7XG5cbiAgICBpZiAoIWlzVmFsaWROdW1iZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBhc3NlZC1pbiAnaW5kZXgnIChzdHJpbmcpIGNvdWxkbid0IGJlIGNvbnZlcnRlZCB0byAnbnVtYmVyJy4gWyR7aW5kZXh9XSBnaXZlbi5gKTtcbiAgICB9IC8vIEtub3dpbmcgdGhhdCB0aGUgY29udmVydGVkIGBpbmRleGAgaXMgYSB2YWxpZCBudW1iZXIsXG4gICAgLy8gd2UgY2FuIHVwZGF0ZSB0aGUgb3JpZ2luYWwgYXJndW1lbnQncyB2YWx1ZS5cblxuXG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG5cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuXG4gIGlmICgoYWN0aXZlSW5kZXggfHwgcGFyYW1zLmluaXRpYWxTbGlkZSB8fCAwKSA9PT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIGNvbnN0IHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdOyAvLyBVcGRhdGUgcHJvZ3Jlc3NcblxuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTsgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWROZXh0ID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2kgKyAxXSAqIDEwMCk7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBEaXJlY3Rpb25zIGxvY2tzXG5cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7IC8vIFVwZGF0ZSBJbmRleFxuXG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTsgLy8gVXBkYXRlIEhlaWdodFxuXG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cblxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG5cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgc3dpcGVyLl9zd2lwZXJJbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiB0LFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcblxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KCQoc3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSBzbGlkZXNQZXJWaWV3IC8gMiB8fCBzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3IC8gMikge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl06bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCwgdGhyZXNob2xkID0gMC41KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJpbXBvcnQgc2V0VHJhbnNpdGlvbiBmcm9tICcuL3NldFRyYW5zaXRpb24uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25TdGFydCBmcm9tICcuL3RyYW5zaXRpb25TdGFydC5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICcuL3RyYW5zaXRpb25FbmQuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbkVtaXQoe1xuICBzd2lwZXIsXG4gIHJ1bkNhbGxiYWNrcyxcbiAgZGlyZWN0aW9uLFxuICBzdGVwXG59KSB7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBwcmV2aW91c0luZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG5cbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuXG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHRyYW5zaXRpb25FbWl0IGZyb20gJy4vdHJhbnNpdGlvbkVtaXQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MgPSB0cnVlLCBkaXJlY3Rpb24pIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufSIsImltcG9ydCB0cmFuc2l0aW9uRW1pdCBmcm9tICcuL3RyYW5zaXRpb25FbWl0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MgPSB0cnVlLCBkaXJlY3Rpb24pIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcblxuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG5cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5Jykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICAkd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn0iLCJpbXBvcnQgZ2V0VHJhbnNsYXRlIGZyb20gJy4vZ2V0VHJhbnNsYXRlLmpzJztcbmltcG9ydCBzZXRUcmFuc2xhdGUgZnJvbSAnLi9zZXRUcmFuc2xhdGUuanMnO1xuaW1wb3J0IG1pblRyYW5zbGF0ZSBmcm9tICcuL21pblRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgbWF4VHJhbnNsYXRlIGZyb20gJy4vbWF4VHJhbnNsYXRlLmpzJztcbmltcG9ydCB0cmFuc2xhdGVUbyBmcm9tICcuL3RyYW5zbGF0ZVRvLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUb1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgICR3cmFwcGVyRWwsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgKTtcbiAgfVxuXG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTsgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcblxuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn0iLCJpbXBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUgPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1pblRyYW5zbGF0ZTtlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7ZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcblxuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHVwZGF0ZVNpemUgZnJvbSAnLi91cGRhdGVTaXplLmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXMgZnJvbSAnLi91cGRhdGVTbGlkZXMuanMnO1xuaW1wb3J0IHVwZGF0ZUF1dG9IZWlnaHQgZnJvbSAnLi91cGRhdGVBdXRvSGVpZ2h0LmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNPZmZzZXQgZnJvbSAnLi91cGRhdGVTbGlkZXNPZmZzZXQuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc1Byb2dyZXNzIGZyb20gJy4vdXBkYXRlU2xpZGVzUHJvZ3Jlc3MuanMnO1xuaW1wb3J0IHVwZGF0ZVByb2dyZXNzIGZyb20gJy4vdXBkYXRlUHJvZ3Jlc3MuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc0NsYXNzZXMgZnJvbSAnLi91cGRhdGVTbGlkZXNDbGFzc2VzLmpzJztcbmltcG9ydCB1cGRhdGVBY3RpdmVJbmRleCBmcm9tICcuL3VwZGF0ZUFjdGl2ZUluZGV4LmpzJztcbmltcG9ydCB1cGRhdGVDbGlja2VkU2xpZGUgZnJvbSAnLi91cGRhdGVDbGlja2VkU2xpZGUuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcblxuXG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cblxuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0gLy8gR2V0IHJlYWwgaW5kZXhcblxuXG4gIGNvbnN0IHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG5cbiAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuXG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cblxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApID09PSBpbmRleClbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpWzBdO1xuICB9OyAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuXG5cbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMuZWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9IC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuXG5cbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH0gLy8gVXBkYXRlIEhlaWdodFxuXG5cbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCBzbGlkZSA9ICQoZSkuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClbMF07XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuXG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG5cbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCAkZWwgPSBzd2lwZXIuJGVsO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgaGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIGlmICh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgfHwgaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gU3VidHJhY3QgcGFkZGluZ3NcblxuXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHNldENTU1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9IC8vIHByZXR0aWVyLWlnbm9yZVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cblxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgJHdyYXBwZXJFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcblxuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjsgLy8gcmVzZXQgbWFyZ2luc1xuXG4gIGlmIChydGwpIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgIG1hcmdpbkJvdHRvbTogJycsXG4gICAgbWFyZ2luVG9wOiAnJ1xuICB9KTtlbHNlIHNsaWRlcy5jc3Moe1xuICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICBtYXJnaW5Cb3R0b206ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7IC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG5cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcblxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlc0xlbmd0aCk7XG4gIH0gLy8gQ2FsYyBzbGlkZXNcblxuXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnO1xuICB9KS5sZW5ndGggPiAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuXG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShpLCBzbGlkZSwgc2xpZGVzTGVuZ3RoLCBnZXREaXJlY3Rpb25MYWJlbCk7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgYDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKSA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctbGVmdCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG5cbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGVbMF07XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cblxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG5cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuXG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgXG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXTogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQsIGdldERpcmVjdGlvbkxhYmVsKTtcbiAgfSAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuXG5cbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jc3Moe1xuICAgICAgW2tleV06IGAke3NwYWNlQmV0d2Vlbn1weGBcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcblxuICAgIGlmIChhbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cblxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgJHdyYXBwZXJFbCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICByZWFsSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgc2xpZGVzLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVQcmV2Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzc31gKTtcbiAgbGV0IGFjdGl2ZVNsaWRlO1xuXG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9IC8vIEFjdGl2ZSBjbGFzc2VzXG5cblxuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICB9IC8vIE5leHQgU2xpZGVcblxuXG4gIGxldCBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBuZXh0U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICB9IC8vIFByZXYgU2xpZGVcblxuXG4gIGxldCBwcmV2U2xpZGUgPSBhY3RpdmVTbGlkZS5wcmV2QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7XG4gICAgcHJldlNsaWRlID0gc2xpZGVzLmVxKC0xKTtcbiAgICBwcmV2U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3ByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vc2hhcmVkL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXNcblxuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcblxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG5cbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgfVxuXG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cblxuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFNsaWRlKGluZGV4LCBzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgICR3cmFwcGVyRWwsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICB9XG5cbiAgY29uc3QgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA8PSAwKSB7XG4gICAgc3dpcGVyLnByZXBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICBjb25zdCBzbGlkZXNCdWZmZXIgPSBbXTtcblxuICBmb3IgKGxldCBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW2ldKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy5vYnNlcnZlcikge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgICR3cmFwcGVyRWwsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgJHdyYXBwZXJFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG5cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qgc2xpZGVzSW5kZXhlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuXG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgJHdyYXBwZXJFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgfVxuXG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyO1xuICBsZXQgaW5kZXhUb1JlbW92ZTtcblxuICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIH1cblxuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9IGVsc2Uge1xuICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3NlcyA9ICcnKSB7XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IVxcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIG9yaWdpbmFsUGFyYW1zLCBwYXJhbXMsIGNoZWNrUHJvcHMpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IHN3aXBlci4kZWwuY2hpbGRyZW4oYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgc3dpcGVyLiRlbC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIG9yaWdpbmFsUGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtcztcbn0iLCJpbXBvcnQgJCBmcm9tICcuL2RvbS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTaGFkb3cocGFyYW1zLCAkc2xpZGVFbCwgc2lkZSkge1xuICBjb25zdCBzaGFkb3dDbGFzcyA9IGBzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfWA7XG4gIGNvbnN0ICRzaGFkb3dDb250YWluZXIgPSBwYXJhbXMudHJhbnNmb3JtRWwgPyAkc2xpZGVFbC5maW5kKHBhcmFtcy50cmFuc2Zvcm1FbCkgOiAkc2xpZGVFbDtcbiAgbGV0ICRzaGFkb3dFbCA9ICRzaGFkb3dDb250YWluZXIuY2hpbGRyZW4oYC4ke3NoYWRvd0NsYXNzfWApO1xuXG4gIGlmICghJHNoYWRvd0VsLmxlbmd0aCkge1xuICAgICRzaGFkb3dFbCA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfVwiPjwvZGl2PmApO1xuICAgICRzaGFkb3dDb250YWluZXIuYXBwZW5kKCRzaGFkb3dFbCk7XG4gIH1cblxuICByZXR1cm4gJHNoYWRvd0VsO1xufSIsImltcG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBzdHlsZXMsIG9mZnNldCwgY3NzLCBlYWNoLCBodG1sLCB0ZXh0LCBpcywgaW5kZXgsIGVxLCBhcHBlbmQsIHByZXBlbmQsIG5leHQsIG5leHRBbGwsIHByZXYsIHByZXZBbGwsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIGZpbHRlciwgcmVtb3ZlIH0gZnJvbSAnZG9tNyc7XG5jb25zdCBNZXRob2RzID0ge1xuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzLFxuICB0b2dnbGVDbGFzcyxcbiAgYXR0cixcbiAgcmVtb3ZlQXR0cixcbiAgdHJhbnNmb3JtLFxuICB0cmFuc2l0aW9uLFxuICBvbixcbiAgb2ZmLFxuICB0cmlnZ2VyLFxuICB0cmFuc2l0aW9uRW5kLFxuICBvdXRlcldpZHRoLFxuICBvdXRlckhlaWdodCxcbiAgc3R5bGVzLFxuICBvZmZzZXQsXG4gIGNzcyxcbiAgZWFjaCxcbiAgaHRtbCxcbiAgdGV4dCxcbiAgaXMsXG4gIGluZGV4LFxuICBlcSxcbiAgYXBwZW5kLFxuICBwcmVwZW5kLFxuICBuZXh0LFxuICBuZXh0QWxsLFxuICBwcmV2LFxuICBwcmV2QWxsLFxuICBwYXJlbnQsXG4gIHBhcmVudHMsXG4gIGNsb3Nlc3QsXG4gIGZpbmQsXG4gIGNoaWxkcmVuLFxuICBmaWx0ZXIsXG4gIHJlbW92ZVxufTtcbk9iamVjdC5rZXlzKE1ldGhvZHMpLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkLmZuLCBtZXRob2ROYW1lLCB7XG4gICAgdmFsdWU6IE1ldGhvZHNbbWV0aG9kTmFtZV0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSk7XG59KTtcbmV4cG9ydCBkZWZhdWx0ICQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWZmZWN0SW5pdChwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIGVmZmVjdCxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgb3ZlcndyaXRlUGFyYW1zLFxuICAgIHBlcnNwZWN0aXZlXG4gIH0gPSBwYXJhbXM7XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtlZmZlY3R9YCk7XG5cbiAgICBpZiAocGVyc3BlY3RpdmUgJiYgcGVyc3BlY3RpdmUoKSkge1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQgPSBvdmVyd3JpdGVQYXJhbXMgPyBvdmVyd3JpdGVQYXJhbXMoKSA6IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbikgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVmZmVjdFRhcmdldChlZmZlY3RQYXJhbXMsICRzbGlkZUVsKSB7XG4gIGlmIChlZmZlY3RQYXJhbXMudHJhbnNmb3JtRWwpIHtcbiAgICByZXR1cm4gJHNsaWRlRWwuZmluZChlZmZlY3RQYXJhbXMudHJhbnNmb3JtRWwpLmNzcyh7XG4gICAgICAnYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nLFxuICAgICAgJy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gJHNsaWRlRWw7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICBzd2lwZXIsXG4gIGR1cmF0aW9uLFxuICB0cmFuc2Zvcm1FbCxcbiAgYWxsU2xpZGVzXG59KSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgJHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICBsZXQgJHRyYW5zaXRpb25FbmRUYXJnZXQ7XG5cbiAgICBpZiAoYWxsU2xpZGVzKSB7XG4gICAgICAkdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsID8gc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc2xpZGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAkdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsID8gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5maW5kKHRyYW5zZm9ybUVsKSA6IHNsaWRlcy5lcShhY3RpdmVJbmRleCk7XG4gICAgfVxuXG4gICAgJHRyYW5zaXRpb25FbmRUYXJnZXQudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5sZXQgYnJvd3NlcjtcblxuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG5cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmV4cG9ydCB7IGdldEJyb3dzZXIgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuL2dldC1zdXBwb3J0LmpzJztcbmxldCBkZXZpY2VDYWNoZWQ7XG5cbmZ1bmN0aW9uIGNhbGNEZXZpY2Uoe1xuICB1c2VyQWdlbnRcbn0gPSB7fSkge1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnOyAvLyBpUGFkT3MgMTMgZml4XG5cbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcblxuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH0gLy8gQW5kcm9pZFxuXG5cbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfSAvLyBFeHBvcnQgb2JqZWN0XG5cblxuICByZXR1cm4gZGV2aWNlO1xufVxuXG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzID0ge30pIHtcbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5leHBvcnQgeyBnZXREZXZpY2UgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5sZXQgc3VwcG9ydDtcblxuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgc21vb3RoU2Nyb2xsOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSxcbiAgICBwYXNzaXZlTGlzdGVuZXI6IGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgbGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlTGlzdGVuZXInLCBudWxsLCBvcHRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBObyBzdXBwb3J0XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfSgpLFxuICAgIGdlc3R1cmVzOiBmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xuICAgIH0oKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuXG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5leHBvcnQgeyBnZXRTdXBwb3J0IH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICBjb25zdCBvYmplY3QgPSBvYmo7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkgey8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7Ly8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSA9IDApIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cblxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG5cbiAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuXG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMgPSAneCcpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBtYXRyaXg7XG4gIGxldCBjdXJUcmFuc2Zvcm07XG4gIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG4gIGNvbnN0IGN1clN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuXG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH0gLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuXG5cbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7IC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG5cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7IC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7IC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG5cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuXG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKC4uLmFyZ3MpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJnc1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG5cbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwgJiYgIWlzTm9kZShuZXh0U291cmNlKSkge1xuICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuXG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG5cbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuXG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGVsLCB2YXJOYW1lLCB2YXJWYWx1ZSkge1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YXJWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgc3dpcGVyLFxuICB0YXJnZXRQb3NpdGlvbixcbiAgc2lkZVxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcblxuICBjb25zdCBpc091dE9mQm91bmQgPSAoY3VycmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIGRpciA9PT0gJ25leHQnICYmIGN1cnJlbnQgPj0gdGFyZ2V0IHx8IGRpciA9PT0gJ3ByZXYnICYmIGN1cnJlbnQgPD0gdGFyZ2V0O1xuICB9O1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gKyBlYXNlUHJvZ3Jlc3MgKiAodGFyZ2V0UG9zaXRpb24gLSBzdGFydFBvc2l0aW9uKTtcblxuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcblxuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuXG4gIGFuaW1hdGUoKTtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIGRlbGV0ZVByb3BzLCBuZXh0VGljaywgbm93LCBnZXRUcmFuc2xhdGUsIGlzT2JqZWN0LCBleHRlbmQsIGdldENvbXB1dGVkU3R5bGUsIHNldENTU1Byb3BlcnR5IH07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0XCJtYWluXCI6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBpbXBvcnQgc21vb3Roc2Nyb2xsIGZyb20gXCJzbW9vdGhzY3JvbGwtcG9seWZpbGxcIlxyXG5pbXBvcnQgeyBidXJnZXIgfSBmcm9tIFwiLi9tb2R1bGVzL2J1cmdlci5qc1wiXHJcbi8vIGltcG9ydCB7IHNtb290aFNjcm9sbCB9IGZyb20gXCIuL21vZHVsZXMvc21vb3RoU2Nyb2xsXCJcclxuLy8gaW1wb3J0IHsgYWRkU3R5bGVzVG9IZWFkZXIgfSBmcm9tIFwiLi9tb2R1bGVzL2FkZFN0eWxlc1RvSGVhZGVyXCI7XHJcbmltcG9ydCB7IHRhYmJpcyB9IGZyb20gXCIuL21vZHVsZXMvdGFicy5qc1wiXHJcblxyXG5pbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XHJcbmltcG9ydCAnc3dpcGVyL2Nzcyc7XHJcblxyXG5cclxuLy8gU3dpcGVyLnVzZShbTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiwgU2Nyb2xsYmFyXSk7XHJcblxyXG4vLyBzbGlkZXIoXHJcbiAgLy8gICBcIi5zbGlkZXJfX3dyYXBwZXJcIixcclxuICAvLyAgIFwiLnNsaWRlcl9faXRlbVwiLFxyXG4gIC8vICAgXCIuc2xpZGVyX19wcmV2XCIsXHJcbiAgLy8gICBcIi5zbGlkZXJfX25leHRcIixcclxuICAvLyAgIFwiLmRvdFwiXHJcbiAgLy8gKVxyXG4gIFxyXG5idXJnZXIoXCIubW9iaWxlLWJ0blwiLCBcIi5uYXZcIiwgXCIubmF2X19saW5rXCIsIFwiYm9keVwiKVxyXG4vLyBzbW9vdGhzY3JvbGwucG9seWZpbGwoKVxyXG4vLyBzbW9vdGhTY3JvbGwoXCIubmF2X19saW5rXCIpO1xyXG5cclxuLy8gYWRkU3R5bGVzVG9IZWFkZXIoXCIuaGVhZGVyXCIpO1xyXG5cclxuLy8gVGFicyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG50YWJiaXMoe1xyXG4gIHRhYkdyb3VwOiBcIlt0YWJzXVwiLFxyXG4gIHBhbmVHcm91cDogXCJbdGFicy1jb250ZW50XVwiLFxyXG59KVxyXG5cclxuLy8gU3dpcGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoXCIuc3dpcGVyXCIsIHtcclxuICBsb29wOiB0cnVlLFxyXG4gIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgc3BhY2VCZXR3ZWVuOiAyMCxcclxuICBjZW50ZXJlZFNsaWRlczogdHJ1ZSxcclxuICBicmVha3BvaW50czoge1xyXG4gICAgNjQwOiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICB9LFxyXG4gICAgNzY4OiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDQsXHJcbiAgICB9LFxyXG4gICAgOTkyOiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDUsXHJcbiAgICB9LFxyXG4gICAgMTI4MDoge1xyXG4gICAgICBzbGlkZXNQZXJWaWV3OiA2LFxyXG4gICAgfSxcclxuICB9LFxyXG59KVxyXG5cclxuLy8gYWNjb3JkZW9uID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmNvbnN0IGFjY29yZGVvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFjY29yZGVvbi1pdGVtX19oZWFkXCIpXHJcblxyXG5hY2NvcmRlb25zLmZvckVhY2goKGFjY29yZGVvbikgPT4ge1xyXG4gIGFjY29yZGVvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgYWNjb3JkZW9uQWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuYWNjb3JkZW9uLWl0ZW1fX2hlYWQuYWN0aXZlXCJcclxuICAgIClcclxuICAgIGNvbnN0IGFjY29yZGVvblRleHQgPSBhY2NvcmRlb24ubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG4gICAgYWNjb3JkZW9uLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIilcclxuXHJcbiAgICBpZiAoYWNjb3JkZW9uQWN0aXZlICYmIGFjY29yZGVvbkFjdGl2ZSAhPT0gYWNjb3JkZW9uKSB7XHJcbiAgICAgIGFjY29yZGVvbkFjdGl2ZS5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpXHJcbiAgICAgIGFjY29yZGVvbkFjdGl2ZS5uZXh0RWxlbWVudFNpYmxpbmcuc3R5bGUubWF4SGVpZ2h0ID0gMFxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhY2NvcmRlb24uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlXCIpKSB7XHJcbiAgICAgIGFjY29yZGVvblRleHQuc3R5bGUubWF4SGVpZ2h0ID0gYWNjb3JkZW9uVGV4dC5zY3JvbGxIZWlnaHQgKyBcInB4XCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjY29yZGVvblRleHQuc3R5bGUubWF4SGVpZ2h0ID0gMFxyXG4gICAgfVxyXG4gIH0pXHJcbn0pXHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiYnVyZ2VyIiwiYnRuIiwibmF2IiwibGluayIsImJvZHkiLCJtb2JpbGVCdG4iLCJuYXZNZW51IiwiYm9keVBhZ2UiLCJsaW5rcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbG9zZU1lbnUiLCJjbGFzc0xpc3QiLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlIiwiZm9yRWFjaCIsImtleSIsInRhYmJpc0NsYXNzIiwiaW5pdCIsInRoaXNPcHRpb25zIiwidGhpc01lbW9yeSIsInNldHVwIiwicGFuZXMiLCJwYW5lR3JvdXAiLCJ0YWJHcm91cCIsInRhYkdyb3VwcyIsImdyb3VwSW5kZXgiLCJwYW5lR3JvdXBzIiwiYWN0aXZlSW5kZXgiLCJnZXRBY3RpdmVJbmRleCIsInJlc2V0VGFicyIsImNoaWxkcmVuIiwicmVzZXRQYW5lcyIsInRhYkl0ZW0iLCJ0YWJJbmRleCIsInBhbmVJdGVtIiwiYWRkVGFiQXR0cmlidXRlcyIsImFkZFBhbmVBdHRyaWJ1dGVzIiwidHJpZ2dlciIsImFjdGl2YXRlIiwiY3VycmVudFRhcmdldCIsImtleWJvYXJkTmF2aWdhdGlvbiIsImV2ZW50S2V5IiwiYWN0aXZhdGVUYWIiLCJhY3RpdmF0ZVBhbmUiLCJpbmNsdWRlcyIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWNrIiwic3RlcCIsImVsIiwicGFyZW50RWxlbWVudCIsImluZGV4T2YiLCJkaXJlY3Rpb24iLCJyZXNldFRhYmluZGV4IiwicG9zIiwiZm9jdXMiLCJjaGlsZCIsInRhYiIsImVtaXRFdmVudCIsInBhbmUiLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJncm91cFRhYnMiLCJtZW1vcnkiLCJsb2FkTWVtb3J5IiwidGFiQWN0aXZlIiwidGFiQWN0aXZlRmFsbGJhY2siLCJwcmVmaXgiLCJnZXRBdHRyaWJ1dGUiLCJzYXZlTWVtb3J5IiwicmVtb3ZlQXR0cmlidXRlIiwidGFicyIsInBhcnNlSW50IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInN0b3JlIiwiZ2V0SXRlbSIsInBhcnNlIiwiZGVmYXVsdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YWJiaXMiLCJEb203IiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIml0ZW1zIiwic3VwZXIiLCJwcm90byIsIl9fcHJvdG9fXyIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJtYWtlUmVhY3RpdmUiLCJhcnJheUZsYXQiLCJhcnIiLCJyZXMiLCJpc0FycmF5IiwiYXJyYXlGaWx0ZXIiLCJjYWxsYmFjayIsInByb3RvdHlwZSIsImZpbHRlciIsImNhbGwiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0V2luZG93IiwiZ2V0RG9jdW1lbnQiLCJodG1sIiwidHJpbSIsInRvQ3JlYXRlIiwidGVtcFBhcmVudCIsImlubmVySFRNTCIsImNoaWxkTm9kZXMiLCJhIiwicXNhIiwibm9kZVR5cGUiLCJ1bmlxdWVBcnJheSIsImFycmF5VW5pcXVlIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY2xhc3NOYW1lcyIsImMiLCJzcGxpdCIsImFkZCIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJjbGFzc05hbWUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiYXR0ciIsImF0dHJzIiwiYXJndW1lbnRzIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwib24iLCJhcmdzIiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwicGFyZW50cyIsImhhbmRsZUV2ZW50IiwiZXZlbnRzIiwiaiIsImRvbTdMaXZlTGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImRvbTdMaXN0ZW5lcnMiLCJvZmYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJkb203cHJveHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0IiwiY2FuY2VsYWJsZSIsImRhdGFJbmRleCIsInRyYW5zaXRpb25FbmQiLCJkb20iLCJmaXJlQ2FsbEJhY2siLCJvdXRlcldpZHRoIiwiaW5jbHVkZU1hcmdpbnMiLCJzdHlsZXMiLCJvZmZzZXRXaWR0aCIsInBhcnNlRmxvYXQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwib3V0ZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wcyIsInByb3AiLCJlYWNoIiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJwcmV2aW91c1NpYmxpbmciLCJlcSIsInJldHVybkluZGV4IiwiYXBwZW5kIiwiZWxzIiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0QWxsIiwibmV4dEVscyIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkFsbCIsInByZXZFbHMiLCJwYXJlbnQiLCJjbG9zZXN0IiwiZmluZCIsImZvdW5kRWxlbWVudHMiLCJmb3VuZCIsImZuIiwibm9UcmlnZ2VyIiwic2hvcnRjdXQiLCJuYW1lIiwiaXNPYmplY3QiLCJleHRlbmQiLCJzcmMiLCJrZXlzIiwic3NyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwiaW1wb3J0Tm9kZSIsImxvY2F0aW9uIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJkb2MiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiSW1hZ2UiLCJEYXRlIiwic2NyZWVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIm1hdGNoTWVkaWEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndpbiIsImdldEJyZWFrcG9pbnQiLCJicmVha3BvaW50cyIsImNvbnRhaW5lckVsIiwiYnJlYWtwb2ludCIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJzdWJzdHIiLCJzb3J0IiwiYiIsImNsaWVudFdpZHRoIiwic2V0QnJlYWtwb2ludCIsImlzR3JpZEVuYWJsZWQiLCJzd2lwZXIiLCJwYXJhbXMiLCJncmlkIiwicm93cyIsImluaXRpYWxpemVkIiwibG9vcGVkU2xpZGVzIiwiJGVsIiwiYnJlYWtwb2ludHNCYXNlIiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwiZW5hYmxlZCIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsImZpbGwiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJsb29wIiwic2xpZGVzUGVyVmlldyIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImFsbG93VG91Y2hNb3ZlIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsImRpc2FibGUiLCJlbmFibGUiLCJlbWl0IiwibG9vcERlc3Ryb3kiLCJsb29wQ3JlYXRlIiwidXBkYXRlU2xpZGVzIiwic2xpZGVUbyIsImNoZWNrT3ZlcmZsb3ciLCJpc0xvY2tlZCIsIndhc0xvY2tlZCIsInNsaWRlc09mZnNldEJlZm9yZSIsImxhc3RTbGlkZUluZGV4Iiwic2xpZGVzIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsInNpemUiLCJzbmFwR3JpZCIsImlzRW5kIiwiYWRkQ2xhc3NlcyIsInJ0bCIsImRldmljZSIsInN1cHBvcnQiLCJzdWZmaXhlcyIsImVudHJpZXMiLCJyZXN1bHRDbGFzc2VzIiwicHJlcGFyZUNsYXNzZXMiLCJ0b3VjaCIsImZyZWVNb2RlIiwiYXV0b0hlaWdodCIsImFuZHJvaWQiLCJpb3MiLCJjc3NNb2RlIiwiY2VudGVyZWRTbGlkZXMiLCJyZW1vdmVDbGFzc2VzIiwicHJvdG90eXBlcyIsImV2ZW50c0VtaXR0ZXIiLCJ0cmFuc2xhdGUiLCJzbGlkZSIsImdyYWJDdXJzb3IiLCJpbWFnZXMiLCJleHRlbmRlZERlZmF1bHRzIiwiU3dpcGVyIiwic3dpcGVycyIsIm5ld1BhcmFtcyIsIl9fc3dpcGVyX18iLCJnZXRTdXBwb3J0IiwiZ2V0RGV2aWNlIiwiYnJvd3NlciIsImdldEJyb3dzZXIiLCJldmVudHNMaXN0ZW5lcnMiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJfX21vZHVsZXNfXyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2QiLCJleHRlbmRQYXJhbXMiLCJiaW5kIiwib25jZSIsInN3aXBlclBhcmFtcyIsInBhc3NlZFBhcmFtcyIsImV2ZW50TmFtZSIsIm9uQW55IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInJlYWxJbmRleCIsImlzQmVnaW5uaW5nIiwicHJldmlvdXNUcmFuc2xhdGUiLCJwcm9ncmVzcyIsInZlbG9jaXR5IiwiYW5pbWF0aW5nIiwidG91Y2hFdmVudHMiLCJkZXNrdG9wIiwidG91Y2hFdmVudHNUb3VjaCIsInN0YXJ0IiwibW92ZSIsImVuZCIsImNhbmNlbCIsInRvdWNoRXZlbnRzRGVza3RvcCIsInNpbXVsYXRlVG91Y2giLCJ0b3VjaEV2ZW50c0RhdGEiLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsInRvdWNoU3RhcnRUaW1lIiwiaXNTY3JvbGxpbmciLCJjdXJyZW50VHJhbnNsYXRlIiwic3RhcnRUcmFuc2xhdGUiLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb2N1c2FibGVFbGVtZW50cyIsImxhc3RDbGlja1RpbWUiLCJub3ciLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImlzVG91Y2hFdmVudCIsInN0YXJ0TW92aW5nIiwiYWxsb3dDbGljayIsInRvdWNoZXMiLCJzdGFydFgiLCJzdGFydFkiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZGlmZiIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInNldEdyYWJDdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJzZXRQcm9ncmVzcyIsInNwZWVkIiwiTWF0aCIsIm1pbiIsIm1heCIsIm1pblRyYW5zbGF0ZSIsImN1cnJlbnQiLCJtYXhUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsIl9lbWl0Q2xhc3NlcyIsImNscyIsImdldFNsaWRlQ2xhc3NlcyIsInNsaWRlRWwiLCJzbGlkZUNsYXNzIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVzIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJ2aWV3IiwiZXhhY3QiLCJzd2lwZXJTaXplIiwic3B2IiwiYnJlYWtMb29wIiwic2xpZGVTaXplIiwic3dpcGVyU2xpZGVTaXplIiwiZGVzdHJveWVkIiwic2V0VHJhbnNsYXRlIiwidHJhbnNsYXRlVmFsdWUiLCJydGxUcmFuc2xhdGUiLCJuZXdUcmFuc2xhdGUiLCJ0cmFuc2xhdGVkIiwidXBkYXRlU2l6ZSIsInVwZGF0ZVByb2dyZXNzIiwidXBkYXRlQXV0b0hlaWdodCIsIndhdGNoT3ZlcmZsb3ciLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwibW91bnQiLCJtb3VudGVkIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwid3JhcHBlckNsYXNzIiwiJHdyYXBwZXJFbCIsInNoYWRvd1Jvb3QiLCJnZXRXcmFwcGVyIiwiY3JlYXRlRWxlbWVudHMiLCJ3cmFwcGVyIiwid3JhcHBlckVsIiwiZGlyIiwidG9Mb3dlckNhc2UiLCJ3cm9uZ1JUTCIsInByZWxvYWRJbWFnZXMiLCJpbml0aWFsU2xpZGUiLCJydW5DYWxsYmFja3NPbkluaXQiLCJhdHRhY2hFdmVudHMiLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsImRldGFjaEV2ZW50cyIsInNsaWRlVmlzaWJsZUNsYXNzIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJkZWxldGVQcm9wcyIsInN0YXRpYyIsIm5ld0RlZmF1bHRzIiwibSIsImluc3RhbGxNb2R1bGUiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwidXNlIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsInJlc2l6ZU9ic2VydmVyIiwibmVzdGVkIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwic2V0V3JhcHBlclNpemUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZWZmZWN0Iiwic3BhY2VCZXR3ZWVuIiwic2xpZGVzUGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsInNsaWRlc09mZnNldEFmdGVyIiwibm9ybWFsaXplU2xpZGVJbmRleCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsInJvdW5kTGVuZ3RocyIsInRvdWNoUmF0aW8iLCJ0b3VjaEFuZ2xlIiwic2hvcnRTd2lwZXMiLCJsb25nU3dpcGVzIiwibG9uZ1N3aXBlc1JhdGlvIiwibG9uZ1N3aXBlc01zIiwiZm9sbG93RmluZ2VyIiwidGhyZXNob2xkIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwidW5pcXVlTmF2RWxlbWVudHMiLCJyZXNpc3RhbmNlIiwicmVzaXN0YW5jZVJhdGlvIiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidXBkYXRlT25JbWFnZXNSZWFkeSIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImxvb3BQcmV2ZW50c1NsaWRlIiwicmV3aW5kIiwic3dpcGVIYW5kbGVyIiwibm9Td2lwaW5nIiwibm9Td2lwaW5nQ2xhc3MiLCJub1N3aXBpbmdTZWxlY3RvciIsInBhc3NpdmVMaXN0ZW5lcnMiLCJzbGlkZUJsYW5rQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJwcmlvcml0eSIsInNlbGYiLCJtZXRob2QiLCJvbmNlSGFuZGxlciIsIl9fZW1pdHRlclByb3h5Iiwib2ZmQW55IiwiZXZlbnRIYW5kbGVyIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZG9tTWV0aG9kIiwic3dpcGVyTWV0aG9kIiwicGFzc2l2ZUxpc3RlbmVyIiwicGFzc2l2ZSIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uQ2xpY2siLCJvblNjcm9sbCIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uUmVzaXplIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicnVuIiwibmV3UHJvZ3Jlc3MiLCJ0cmFuc2xhdGVzRGlmZiIsIm9yaWdpbmFsRXZlbnQiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsInBhdGhUcmVlIiwicGF0aCIsImNvbXBvc2VkUGF0aCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsIm5leHRUaWNrIiwic3dpcGVEaXJlY3Rpb24iLCJjdXJyZW50UG9zIiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiaW5jcmVtZW50IiwicmF0aW8iLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwidHlwZSIsInRhcmdldFRvdWNoIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJhdGFuMiIsImFicyIsIlBJIiwibG9vcEZpeCIsImdldFRyYW5zbGF0ZSIsInNldFRyYW5zaXRpb24iLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwiJHRhcmdldEVsIiwid2hpY2giLCJidXR0b24iLCJpc1RhcmdldFNoYWRvdyIsIl9fY2xvc2VzdEZyb20iLCJhc3NpZ25lZFNsb3QiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJtb3ZpbmciLCJjdXJzb3IiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiY3VycmVudFNyYyIsIiRzZWxlY3RvciIsImJsYW5rU2xpZGVzTnVtIiwiYmxhbmtOb2RlIiwiY2VpbCIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJjbG9uZU5vZGUiLCJuZXdJbmRleCIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsImF1dG8iLCJPYnNlcnZlciIsIm9ic2VydmVycyIsImF0dGFjaCIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJkaXNjb25uZWN0IiwiUmVzaXplIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIlJlc2l6ZU9ic2VydmVyIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsInVub2JzZXJ2ZSIsInNsaWRlVG9Mb29wIiwic2xpZGVOZXh0Iiwic2xpZGVQcmV2Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwicnVuQ2FsbGJhY2tzIiwiaW50ZXJuYWwiLCJwZXJHcm91cCIsIl9jbGllbnRMZWZ0Iiwibm9ybWFsaXplIiwidmFsIiwiZmxvb3IiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4Iiwic25hcCIsInNuYXBJbmRleCIsInByZXZJbmRleCIsImluaXRpYWwiLCJpbmRleEFzTnVtYmVyIiwiaXNGaW5pdGUiLCJzbGlkZUluZGV4IiwicHJldmlvdXNJbmRleCIsInNraXAiLCJub3JtYWxpemVkR3JpZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsInRyYW5zaXRpb25TdGFydCIsImlzSCIsInQiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwic2Nyb2xsU25hcFR5cGUiLCJfaW1tZWRpYXRlVmlydHVhbCIsIl9zd2lwZXJJbW1lZGlhdGVWaXJ0dWFsIiwic21vb3RoU2Nyb2xsIiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvSW5kZXgiLCJjbGlja2VkSW5kZXgiLCJjbGlja2VkU2xpZGUiLCJjdXJyZW50U25hcCIsImJ5Q29udHJvbGxlciIsInRyYW5zaXRpb25FbWl0IiwiZ2V0U3dpcGVyVHJhbnNsYXRlIiwiYXhpcyIsIngiLCJ5IiwidHJhbnNsYXRlQm91bmRzIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJhY3RpdmVTbGlkZXMiLCJnZXRTbGlkZUJ5SW5kZXgiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVGb3VuZCIsIm11bHRpcGxpZXIiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJOdW1iZXIiLCJpc05hTiIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibm9kZSIsImxhYmVsIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJvZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0Iiwic2V0Q1NTUHJvcGVydHkiLCJncmlkRW5hYmxlZCIsImluaXRTbGlkZXMiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInVwZGF0ZVNsaWRlIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwidXBkYXRlV3JhcHBlclNpemUiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJfIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsImFsbFNsaWRlc09mZnNldCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ2IiwiYWN0aXZlU2xpZGUiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRDZW50ZXIiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInByZXBlbmRTbGlkZSIsImFwcGVuZFNsaWRlIiwic2xpZGVzQnVmZmVyIiwiY3VycmVudFNsaWRlIiwicmVtb3ZlQWxsU2xpZGVzIiwic2xpZGVzSW5kZXhlcyIsInJlbW92ZVNsaWRlIiwiaW5kZXhUb1JlbW92ZSIsImNsYXNzZXNUb1NlbGVjdG9yIiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsImNoZWNrUHJvcHMiLCJjcmVhdGVTaGFkb3ciLCIkc2xpZGVFbCIsInNoYWRvd0NsYXNzIiwiJHNoYWRvd0NvbnRhaW5lciIsInRyYW5zZm9ybUVsIiwiJHNoYWRvd0VsIiwiTWV0aG9kcyIsIm1ldGhvZE5hbWUiLCJ3cml0YWJsZSIsImVmZmVjdEluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJwZXJzcGVjdGl2ZSIsIm92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCIsIl9zIiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0UGFyYW1zIiwiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJhbGxTbGlkZXMiLCIkdHJhbnNpdGlvbkVuZFRhcmdldCIsImV2ZW50VHJpZ2dlcmVkIiwidHJpZ2dlckV2ZW50cyIsImlzU2FmYXJpIiwidWEiLCJpc1dlYlZpZXciLCJjYWxjQnJvd3NlciIsImRldmljZUNhY2hlZCIsIm92ZXJyaWRlcyIsInBsYXRmb3JtIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZG9jdW1lbnRFbGVtZW50IiwiRG9jdW1lbnRUb3VjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJnZXN0dXJlcyIsImNhbGNTdXBwb3J0Iiwib2JqZWN0IiwiZGVsYXkiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwibyIsInRvIiwibm9FeHRlbmQiLCJuZXh0U291cmNlIiwiSFRNTEVsZW1lbnQiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJzZXRQcm9wZXJ0eSIsInN0YXJ0UG9zaXRpb24iLCJ0aW1lIiwic3RhcnRUaW1lIiwiY3NzTW9kZUZyYW1lSUQiLCJpc091dE9mQm91bmQiLCJhbmltYXRlIiwiZ2V0VGltZSIsImVhc2VQcm9ncmVzcyIsImNvcyIsImN1cnJlbnRQb3NpdGlvbiIsIm92ZXJmbG93IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJkIiwiZGVmaW5pdGlvbiIsImhhc093blByb3BlcnR5IiwiYmFzZVVSSSIsImFjY29yZGVvbiIsImFjY29yZGVvbkFjdGl2ZSIsImFjY29yZGVvblRleHQiLCJtYXhIZWlnaHQiLCJzY3JvbGxIZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9"}